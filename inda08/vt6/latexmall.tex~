%%!TEX encoding = UTF-8 Unicode 
% Att vi vill ha ett dokument som ser ut som en teknisk artikel, på a4-papper, tvåsidigt med 10 punkters font.
\documentclass[a4paper,10pt,twoside]{article}
% sidmarginaler
\usepackage[inner=3cm,top=3cm,outer=2cm,bottom=3cm]{geometry}
% svenska avstavningsregler
\usepackage[swedish]{babel}
\usepackage[T1]{fontenc}
% teckenencoding
\usepackage[utf8x]{inputenc}

% mattesymboler
\usepackage{amssymb}

% fina kodlistings
\usepackage{fancyvrb}
\usepackage{listings}

% lite inställningar till listings-paketet, bland annat så att den bryter för långa rader
\lstset{
	% vilket språk vi använder i våra kodlistings, så att listings-paketet vet hur den ska highligta saker
	language=Java, 
	% huruvida vi ska ha syntax highlighting
	fancyvrb=true, 
	% hur stora tabstopp vi ska ha
	tabsize=4, 
	% huruvida vi ska tillåta andra tecken än a-z
	extendedchars=\true
	% hur breda listings vi vill ha (skriv exempelvis linewidth=0.5\textwidth för att få listings som bara tar upp halva bredden av sidan)
	linewidth=\textwidth, 
	% huruvida vi ska visa mellanslag
	showstringspaces=false, 
	% huruvida vi ska bryta rader som är för långa
	breaklines=true, 
	% huruvida den ska få bryta rader mitt i ord eller inte (true här betyder att den bara bryter mellan ord)
	breakatwhitespace=true, 
	% indentera radbrytningar automatiskt
	breakautoindent=true,
	% lägg in radnummer på vänster sida
	numbers=left, 
	% hur stora radnumren ska vara
	numberstyle=\tiny, 
	% hur långt det ska vara mellan radnumren och koden
	numbersep=8pt
}
% stoppa in fina hyperlänkar (som man kan klicka på) i tableofcontents
\usepackage{hyperref}
\hypersetup{pdfpagemode=FullScreen,  colorlinks=true, linkcolor=blue}

% Ett litet paket för fin pseudokod
\usepackage{algorithmic}
\usepackage{algorithm}

% stoppa in ditt namn här nedanför
\def\myName{Peter Boström}

% kurskod här (skriver in indans kod som default)
\def\courseCode{DD1340}
% kursnamn här (återigen inda som default)
\def\courseName{Introduktion till Datalogi}

% stoppa in numret på inlämningen här nedanför
\def\assignmentNumber{6}

% stoppa in datum för när du skriver den här inlämningen här
\def\writtenDate{2009-02-24 MIN FÖDELSEDAG <3}

% fina sidheaders/footers
\usepackage{fancyhdr}
% inställningar till fancyhdr
\pagestyle{fancy}\headheight 13pt
\fancyfoot{}
% sidhuvud, vänster sida, fyll i ditt namn här
\lhead{\courseCode - \myName}
% sidhuvud, höger sida, fyll i vilken uppgift detta gäller
\rhead{Inlämningsuppgift \assignmentNumber}
% sidnumrering på vänster sida för jämna sidnummer, höger sida för ojämna sidnummer
\fancyfoot[LE,RO]{\thepage}


\title{Hemuppgift \assignmentNumber -  \courseName}
\date{\writtenDate}
\author{\myName}
\begin{document}
\maketitle % skapa titelsida
	\thispagestyle{empty}\cfoot{}
\clearpage % ny sida
\thispagestyle{empty}\cfoot{}
\tableofcontents % innehållsförteckning
\clearpage
\setcounter{page}{1} % börja räkna från sidnummer ett på den här sidan.

\section{Quicksort} % ny sektion
\subsection{Testkod}

Testkoden är modulärt uppbyggd och bygger på att listor skapas, kopieras och sorteras av flera olika sorteringsalgoritmer, både javas quicksort, egen insertion sort och diverse egna quicksortvarianter. Sedan \emph{assertas} att alla sorterar korrekt, annars spottas felmeddelande ut med vilken algoritm som misslyckades.\\

Test görs på följande olika listor

\begin{itemize}
\item Tom lista.
\item Lista med ett element.
\item Lista med två element i ordning.
\item Lista med två felsorterade element.
\item Lista med tre element.
\item Stor lista (4096 element) med slumpmässiga tal.
\item Stor sorterad lista.
\item Stor felsorterad lista.
\item Stor lista där alla element är lika.
\end{itemize}

\subsection{Timer-test}

Till tidtagartesten användes Javas originalimplementation som referens för tidtagning. Likt testfallen så görs ett antal identiska listor som sorteras av varje enskild algoritm. Detta tas även tid på och jämförs med Javas quicksorts prestanda på samma lista. För att göra rimliga tidtagningar används ganska stora listor (1 000 000 element), förutom ett fåtal slumplistor med beräkningar på 1 000, 10 000 och 100 000 element resp. En miljon element verkade mer intressant, därför gjordes flera slumpmässiga listor med en miljon element för upprepade beräkningar. \\

\noindent
\begin{tabular}{llllll} % fyra stycken kolumner med vänsterjustering
Algoritm/Test 	&	qsort (Java)	&	qsort	&	qsort(rand)	&	qsort+ins sort	&	qsort+ins sort (rand)\\
\hline % horisontell linje
Sorted	&	300 ms	&	444 ms (1.48)	&	634 ms (2.11)	&	145 ms (0.48) 	&	229 ms (0.76)	\\
Reverse	&	297 ms	&	324 ms (1.09)	&	659 ms (2.11)	&	124 ms (0.42) 	&	181 ms (0.61)	\\
Same	&	31 ms	&	398 ms (12.8)	&	475 ms (15.32)	&	209 ms (6.74) 	&	227 ms (7.3)	\\
Rand (1000)	&	0 ms	&	0 ms	&	0 ms	&	0 ms 	&	0 ms	\\
Rand (10k)	&	3 ms	&	3 ms (1)	&	5 ms (1.67)	&	2 ms (0.67) 	&	2 ms (0.67)	\\
Rand (100k)	&	39 ms	&	66 ms (1.69)	&	96 ms (2.46)	&	29 ms (0.74) 	&	53 ms (1.36)	\\
Rand (1M)	&	437 ms	&	497 ms (1.14)	&	698 ms (1.60)	&	340 ms (0.78) 	&	376 ms (0.86)	\\
\end{tabular}

\subsection{Brytpunkt till insertion sort}

Brytpunkten till insertion sort beräknades genom att beräkna ratio mellan javas quicksort och den egna implementation som använde sig av insertion sort. Sedan testade jag att sätta övre gränsen för hur stora listor fick vara och fortsätta sorteras med quicksort. Diverse sorteringar med en miljon element gjordes för att säkerställa hur effektiv den var i förhållande till javas egna implementation.

Jag började på 100 element vilket var långt över quicksort utan insertion sort i körtid. Sedan minskade jag till 50, 25 och valde att testa diverse värden runt 10-20. Slutligen landade jag på 16 element som övre gräns till att påbörja insertion sort.

\subsection{Reflektion}

Intressant är att slumpmässigt värde på pivot inte är värt på vanliga quicksort-implementationen men inte har större förluster i implementationen med insertion sort. Trolig förklaring för detta är att pseudoslumpade tal helt enkelt inte är värt det på mindre listor, som istället i andra fallet tas med insertion sort. Förmodligen skulle man kunna hitta en brytpunkt där det slutar vara värt att beräkna slump-pivot.

Intressant är även att pseudomedian från tre slumpade index inte verkade vara värt det i någon av fallen för listor i denna storlek. Test gjordes tidigare men togs inte med senare i arbetet då förlusterna från tre slumpade tal helt enkelt var för stora.

Pivot som vänstervärde i sorterad lista blir för komplex och orsakar Stack overflow. Det var tänkt att ha med detta som jämförelsevärde, men det skippades av komplexitetsskäl.

Javas quicksort-implementation var tokigt överlägsen på listor med samma element.

I övrigt så fick den stryk med minst 80\% för större listor, och mer på sorterade eller felsorterade, vilket känns kul.

\clearpage

% i appendix infogar du alla eventuella .java-filer du ska skicka med, och lite annat.
\appendix

\section{Källkod}
% här är källkod för klassen MyClass.java

InsertionSort.java
QuicksortInsertion.java
QuicksortInsertionRandom.java
Quicksort.java
QuicksortJava.java
QuicksortRandomPivot.java
Sorting.java
SortingTest.java
SortingTimer.java
Stopwatch.java

\subsection{InsertionSort.java}
\lstinputlisting{src/InsertionSort.java}

\subsection{QuicksortInsertion.java}
\lstinputlisting{src/QuicksortInsertion.java}

\subsection{QuicksortInsertionRandom.java}
\lstinputlisting{src/QuicksortInsertionRandom.java}

\subsection{Quicksort.java}
\lstinputlisting{src/Quicksort.java}

\subsection{QuicksortJava.java}
\lstinputlisting{src/QuicksortJava.java}

\subsection{QuicksortRandomPivot.java}
\lstinputlisting{src/QuicksortRandomPivot.java}

\subsection{Sorting.java}
\lstinputlisting{src/Sorting.java}

\subsection{SortingTest.java}
\lstinputlisting{src/SortingTest.java}

\subsection{SortingTimer.java}
\lstinputlisting{src/SortingTimer.java}



% slut på dokumentet
\end{document}
