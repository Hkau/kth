Homework D for avalg11
Peter Boström <pbos@kth.se>
2011-12-11

# Problem 1: The handout covering amortized analysis discusses amortized analysis of of a dynamic table growing and shrinking. Analyze the amortized complexity of a series of inserts and deletes assuming

# * The table starts empty (num = 0) and with (size = 0).
# * If the table is of size zero and an element is added it grows to size 1.
# * If a table of size s ≥ 1 is full and an element is added, the table is grown to size 2n, elements are relocated and the new element is added.
# * If, after removal, a table of size s ≥ 1 has less than s/3 elements is shrunk to size ⌈2s/3⌉, and the elements are relocated.
# * The cost of adding or deleting an element is 1 (except if the table grows or shrinks)
# * The cost of growing or shrinking the table is equal to the number of elements moved as a result of relocation.

# Use the potential function Φ = |2num - size| and determine the amortized cost of insertions and deletions. 

Ta(o) = T(o) + (Φ(S-after) - Φ(S-before))

push_back:

normal: 1 + (|2*(num+1)-size| - |2*num-size|) = 1 + 2 = 3
resize (happens when size == num, size after = 2*num): 1 + (resize=num) + (|2*(num+1)-2*num| - |2*num-num|) =
	1 + num + ((2 - num)) = 1 + 2 = 3

So, push_back costs 3 (O(1)).

pop_back:

normal: 1 + (|2*(num-1)-size| - |2*num-size|) = 1 + 2 = 3
resize (happens when num<size/3): 1 + (resize = num) + (|2*(num-1)-num)| - |2*num-3*num|) + rounding error =
	{rounding will often give a rounding error, but it's really small, for sure smaller than 3, so let's add that} =
	1 + num + (2-num) + rounding error = 3 + rounding error < 6

So, pop_back costs at most 5 (O(1)).

# Problem 2: Let makeSet, union, and findSet be the three operations of the union-find data structure implemented using a disjoint-set forest with union by rank and path compression Draw a picture of the data structure that results from running the following code (draw it at the indicated points in time). Include the ranks of the elements in your picture. In case the sets containing i and j have the same rank, the union(i, j) operation, then the root of i's tree becomes the root of the union.

# for (i = 1; i <= 16; i++)
#     makeSet(i)
# for (i = 1; i <= 15; i += 2)
#     union(i, i+1)
# for (i = 5; i <= 13; i += 4)
#     union(i, i+2)

# draw the datastructure at this point in time

(1,1) (2,1) (3,3) (4,3) (5,5) (6,5) (7,5) (8,7) (9,9) (10,9) (11,9) (12,11) (13,13) (14,13) (15,13) (16,15)

2->1
4->3

   6->5
8->7->5

    10->9
12->11->9

    14->13
16->15->13

# union(3, 15)
# union(10, 8)
# union(16, 2)
# union(13, 9)

# draw the datastructure at this point in time

(1,13) (2,1) (3,13) (4,3) (5,9) (6,5) (7,5) (8,5) (9,9) (10,9) (11,9) (12,11) (13,9) (14,13) (15,13) (16,13)

2->1->13
4->3->13
  16->13
  15->13
  14->13->9
  12->11->9
      10->9
    6->5->9
    7->5
    8->5

# Problem 3: In class we analyzed disjoint-set forest with union by rank with path compression. In the analysis we used without proof that for any element, its rank never exceeds log2n. Prove this. More precisely, show that in a sequence of m operation where n operations are makeSet no element gets rank more than log2n.

# It may be helpful to prove that if x is a root and its rank is k, then it is the root of a tree with at least 2^k elements. 

A set in a disjoint-set forest structure only increases in rank (and also only by one) when an union of two sets of equal rank is performed.

A MakeSet operation generates a rank-0 set of one element. A rank-1 element is formed by unifying two of these rank-0 sets, so a rank-1 set must contain (at least, more rank-0 elements can be joined into this rank-1 set) 2 elements.

A set of rank n must be formed by taking the union of two rank-(n-1) sets. Adding additional rank-(n-1) sets will yield more elements, but not a higher rank, thus the minimum number of elements a rank-n set can have is twice the minimum number of elements for a single rank-(n-1) set.

|rank-0| = 1 = 2⁰
|rank-1| = 2¹
|rank-2| >= 2*|rank-1| >= 2*2¹ = 2²
|rank-3| >= 2*|rank-2| >= 2*2² = 2³
..
|rank-n| >= 2*|rank-(n-1)| >= 2*2^(n-1) = 2^n

As we can see, rank-n set has to contain at least 2^n elements. It follows that a set with rank log2(n) will have at least 2^log2(n) = n elements, and that a set with rank log2(n)+1 will have to have at least 2^(log2(n)+1) = 2*n elements.

To finalize the proof: In a sequence of m operations where n operations are makeSet, there are at most n elements available at all times.

Assume that we have a rank-(log2(n)+1) set S. This set S would then contain at least 2*n elements (see above). As a sequence of n makeSet operations only generates n elements, such a construction is impossible. No set can contain more elements than there are elements in total. Thus constructing S is impossible, the rank of S can not be higher than log2(n), which is what we aimed to prove.

(As for higher ranks than log2(n)+1, all log2(n)+k-rank sets require two log2(n)+k-1-rank sets to exist, and as no log2(n)+1-rank sets can be constructed, it follows that no log2(n)+2 sets can be constructed either, and so on.)

# Problem 4: As there are a number of couch potatoes at KTH CSC, it has been decided that professors should be assigned to classrooms in such a way that they have to walk as far as possible to get to class, but how should one find such an assignment efficiently? This is a simplified version of that problem.

# There are n professors and 2n classrooms. The input is a table t[1..n,1..2*n] where t[p, c] is the distance from the office of professor p to classroom c.

# Design an efficient algorithm that finds a way to assign each professor to a classroom so that each professor gets a classroom and no classroom is used by more than one professor, and maximize the sum of the distances the professors need to walk if they all walk from their offices to their classrooms.

# Your algorithm should run in time polynomial in n, and you may analyze it using unit cost (as opposed to bit cost). For full credit, its complexity should be noticeably better than O(n^4).

The Hungarian algorithm with modifications by Edmonds and Karp can be used to minimize the cost of n workers doing n tasks in O(n³) time. To convert our problem into a min-cost problem we'll simply take the maximum distance cost and assign every (worker,task) pair a new cost: max_cost - cost.

To solve that we have this non-square n-x-2n matrix, we'll simply augment another n-x-2n matrix with costs max_cost+1. This will prevent these new fake workers from interfering. All real professors will have a room chosen first, and all fake workers' rooms will be chosen arbitrarily as they have the same cost. Creating this new matrix is O(n²).

Then we shove this into the hungarian algorithm, our new matrix is size 2n*2n, which gives O((2n)³) = O(n³) time.

Finally we take out all real assignments (all n professors and their classrooms), this will be O(n²) as well.

# Problem 5: This problem is the same as Problem 4, except that we have a different target function. This time you should maximize the minimum distance a professor needs to walk to get from her office to the her classroom. In other words, if D is the shortest distance that any professor needs to walk to get to her classroom, then find a classroom assignment that makes D as large as possible.

# Your algorithm should run in time polynomial in n, and you may analyze it using unit cost (as opposed to bit cost). For full credit, its complexity should be noticeably better than O(n^4).

Ford and Fulkerson extended the Hungarian algorithm to solve the general transportation problem. This might/should be applicable here.

