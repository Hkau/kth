ALGORITMBOKEN:

1.1

	Stämmer inte:

	man 1 gillar kvinna 1 mest
	kvinna 1 gillar man 2 mest
	man 2 gillar kvinna 2 mest
	kvinna 2 gillar man 1 mest

	oavsett hur man parar ihop dessa så kommer inget par få sina favoriter, utan endast en av dem.

1.2

	Sant. Hon kommer sedan inte att vilja byta eftersom hon inte kommer att föredra den hon eventuellt frias till av, när de väl har hittat varandra.

2.1

	a, a:	n² becomes (2n)² = 4n²			4n²/n² = 4. Which is four times slower.
	a, b:	n² becomes (n+1)² = n²+2n+1		n²+2n+1-n² = 2n+1. It'll take 2n+1 more operations.

	b, a:	n³ becomes (2n)³ = 8n²			8n²/n² = 8. 8 times slower.
	b, b:	n³ becomes (n+1)³ = n³+3n²+3n+1	n³+3n²+3n+1-n³ = 3n²+3n+1. Takes 3n²+3n+1 more operations.

	c, a:	100n² becomes 100(2n)² = 100*4n²			100*4n²/(100*n²) = 4. Which is four times slower.
	c, b:	100n² becomes 100(n+1)² = 100(n²+2n+1)		100(n²+2n+1)-100(n²) = 100(2n+1). It'll take 200n+100 more operations.

	d, a:	nlog(n) becomes 2nlog(2n) = 2n(log(n)+1) = 2nlog(n)+2n	(2nlog(n)+2n)/nlog(n) = 2+2/log(n). It'll take 2+2/log(n) times longer.
	d, b:	vet inte, försökt med logaritmlagar osv, kommer inte fram till någon lösning.

	e, a:	2^n becomes 2^2n = 2^n * 2^n			2^2n/2^n = 2^n.	Takes 2^n times more. 
	e, b:	2^n becomes 2^(n+1) = 2^n*2				2^n*2/2^n = 2. Takes twice the time.

2.2

	10¹⁰*60*60 = 3.6*10¹³ 

	a: 
		n²=10¹⁰*60²
		n=10⁵*60 = 6*10⁶ element.

	b:
		n³=10¹⁰*60²
		n≈33019 element.

	c:
		100n²=10¹⁰*60²
		n²=10⁸*60²
		n=10⁴*60 = 6*10⁵

	d:
		Kan inte lösa. Kommer till n^n = 2^(10^10*60^2) vilket är jättestort. Kan inte lösa n^n algebraiskt.

	e:
		2^n = 3.6*10¹³
		n = log(3.6*10¹³) ≈ 45

	f:
		2^2n = 3.6*10¹³
		2n = log(3.6*10¹³)
		n = log(3.6*10¹³)/2 avrundas ner till 22, 2^(2*23) kräver flera operationer och tar längre tid än en timma.

BUBBLESORT:

	Lower bound (antag redan sorterad lista):	2(n-1).
		Den kommer att jämföra alla element i listan med varandra. Sedan kommer den att göra om samma jämförelse för att se om den är sorterad.

	Upper bound (bakvänd lista):
		Efter första iterationen kommer ett element sitta på rätt plats, dvs. längst bak. Detta tar inte algoritmen för övrigt hänsyn till, utan följande iterationer kommer ändå jämföra med sista elementet, vilket fortfarande kräver (n-1) jämförelser per iteration.
		Testen om listan är rätt break;ar inte utan fortsätter jämföra även om den har uppfyllt kriteriet för att börja om. För varje gång den går igenom while-loopen kommer den att göra 2(n-1) jämförelser. Frågan är då hur många gånger den kommer gå igenom loopen.
		Antag att listan är så felsorterad som möjligt. Detta kommer sätta första elementet på rätt plats. Andra iterationen kommer att sätta andra elementet på rätt plats.
		Detta sker fram till n-1:e elementet, som också hamnar på rätt plats. n:e elementet kommer då också sitta på rätt plats, eftersom det inte går att placera alla andra element rätt utan att det sista också hamnar rätt. Som värst så kräver funktionen altså (n-1) iterationer.
		Detta ger 2(n-1)*(n-1) jämförelser; (n-1) iterationer, med 2(n-1) jämförelser på varje.
		Vilket ger 2*(n²-2n+1) = 2n²-4n+1 jämförelser i de sämst sorterade listorna.

PROGRAMMERINGSBOKEN:

5.58

	public static final double TOLERANCE = 0.001;
	private static final int PASS = 40;
	public static final char MARK = 'h';

5.59

	Värden för index i datalistan byts ut mot lättläsliga värden för år månad dag, osv. Detta för att det är lättare för både nån som läser koden, likväl som när koden skrivs. dataValues[YEAR] är lättare att både läsa och förstå än dataValues[0].

5.60

	Minska konstanterna i LogEntry och minska på dataValues storlek för att inte slänga bort onödigt minne, om än marginellt.

5.61

	/**
	 * Generates your Star-Wars name.
	 * 
	 * @author Peter Boström
	 * @version some
	 */
	public class NameGenerator
	{
		/**
		 * Generates a Star Wars name.
		 * The names are required to be long enough (more than or equal to either 3 or 2 characters) and in the proper case.
		 * 
		 * @param  firstName  The character's first name.
		 * @param  lastName   The character's last name.
		 * @param  maidenName The character's mother's maiden name.
		 * @param  townName   The name of the town or city where the character was born.
		 * @return     The corresponding Star Wars name.
		 */
		public static String GenerateStarWarsName(String firstName, String lastName, String maidenName, String townName)
		{
		    return lastName.substring(0, 3) + firstName.substring(0, 2).toLowerCase() + ' ' +  maidenName.substring(0, 2) + townName.substring(0, 3).toLowerCase();
		}
	}

5.62

	String.toUpperCase() konverterar inte sig själv utan skapar en kopia som returneras. Denna kopia är vad man vill skriva ut, inte originalstringen.

		System.out.println(s.toUpperCase());

	hade gjort just detta.

5.63

	Går inte, java är call by value, det man kommer att ändra på är kopior av variablerna. Inuti funktionen kommer det däremot se ut som att det fungerar eftersom värdena som man kommer åt innifrån funktionen kommer att ha ändrats.


