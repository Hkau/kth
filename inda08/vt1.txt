8.12:
	a:
		Person p1 = new Student(); // Valid, Student är även Person.
		Person p2 = new PhDStudent(); // Valid, PhDStudent är Student som även är Person.
		PhDStudent phd1 = new Student(); // Invalid, Student härstammar inte från PhDStudent.
		Teacher t1 = new Person(); // Invalid, Person härstammar inte från Teacher.
		Student s1 = new PhDStudent(); // Valid, PhDStudent är även Student.

	b:
		Person p1 = new Person();
		Person p2 = new Person();
		PhDStudent phd1 = new PhDStudent();
		Teacher t1 = new Teacher();
		Student s1 = new Student();
		
		s1 = p1; // Invalid, s1 är av typen Student där Person (p1) inte härstammar ifrån.
		s1 = p2; // Invalid, samma anledning.
		p1 = s1; // Valid, s1, Student,, är även Person.
		t1 = s1; // Invalid, Student är inte Teacher.
		s1 = phd1; // Valid, PhDStudent är en Student.
		phd1 = s1; // Invalid, Student härstammar inte från PhDStudent utan tvärtom.

8.15:

	java.lang.Object
	 ^--java.util.AbstractCollection
		 ^--java.util.AbstractSet
		 |   ^--java.util.HashSet
		 |   |   ^--java.util.LinkedHashSet
		 |   +--java.util.TreeSet
		 +--java.util.AbstractList
			 ^--java.util.AbstractSequentialList
			 |   ^--java.util.LinkedList
			 +--java.util.ArrayList
			 +--java.util.Vector
				 ^--java.util.Stack

8.16:

	Bifogar klasser från projektet.

alg:

	double expIterativ(double x, int n) {
		double res = 1.0;	// Börjar på 1.0, för x⁰=1, stämmer.

		for (int i = 0; i < n; i++)
			res *= x;		// Ökad exponent med 1 multiplicerar talet med basen, stämmer.
		return res;			// Returnerar värdet efter alla iterationer är genomförda, stämmer.
	}

	double expRekursiv(double x, int n) {
		if (n <= 4)
			return expIterativ(x, n);	// Bygger på iterativa metoden, expRekursiv kommer att fungera för n<=4 och returnera rätt.

		return expRekursiv(x, n/2) *	// Trunkering av n/2 och (n+1)/2 ger expRekursiv(x, n/2) * expRekursiv(x, n) för jämna n (n/2+n/2 = n)
			expRekursiv(x, (n + 1)/2);	// alternativt expRekursiv(x, n/2-0.5) * expRekursiv(x, n/2+0.5) för udda n (n/2-0.5+n/2+0.5 = n)
	}									// Rekursionen delar upp potensen tills exponenten som ska räknas ut är liten nog
										// för den iterativa metoden, dessa multipliceras korrekt ihop och det korrekta svaret
										// returneras för varje mindre exponent som multipliceras ihop och i sin tur returneras

	Den iterativa metoden har tidskomplexiteten Θ(n) eftersom konstanta operationer utförs lika många gånger som exponenten.

	Basfallet på den rekursiva då n<=4 kan ses som konstant. För varje anrop där n>4 delas antalet iterationer på hälften. Dvs. vid varje funktionsanrop halveras problemstorleken.

	T(n) = aT(n/b) + f(n)
	
	T(n) = 2T(n/2) + 1

	f(n) = Theta(n^d)

	a = 2
	b = 2
	d = 0

	b^d = 2^0 = 1

	a > b^d ger Theta(n^(log[b](a)))

	Den rekursiva funktionen har alltså tidskomplexiteten Theta(n^(log2(2))) = Theta(n).

	
