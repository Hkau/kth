h1. Architectural Design Document

h1. Abstract

This document describes the architectural design of Nyx' booking system for Kårspexet. It aims to give Nyx' developers  a more defined picture of what needs to be delivered during the software development phase. 
Within, the reader will find a brief overview of the system's architecture, external interfaces, and what methods will be used while implementing the system. Then a full, highly detailed description is given for all the system's components, from its models, and controllers, to its layouts, views, and existing libraries. The project's feasibility is also included, with a likely time plan for the system's development phase. Lastly, a matrix is given that lets the reader trace requirements back to the System Requirements Document.

h1. Ändringslogg

|_.Version|_.Ändringar|
|_.1.0|Färdig korrekturläst version. Mindre formatteringsändringar gjorda.|
|_.0.8|Korrekturläsning och rättning, närmar sig färdig version.|
|_.0.3|Formatering av tabeller, korrekturläsning och planering skapad.|
|_.0.2|Dokumentformatering, tabeller intakta.|
|_.0.1|Första sammanställd version av dokumentet.|

$VERSIONS$

h1. Gruppmedlemmar

Projektgruppen *Nyx* består av följande medlemmar.

*Kalle Arvidsson* -- 890601-2490, kallear@kth.se

*Peter Boström* -- 890224-0814, pbos@kth.se

*Erik Eklund* -- 880816-0454, eekl@kth.se 

*André Gräsman* -- 890430-3214, grasman@kth.se 

*Rasmus Göransson* -- 850908-8517, rasmusgo@kth.se 

*Per Hagsten* -- 870529-0115, hagsten@kth.se

*Victor Hallberg* -- 890121-0057, victorha@kth.se

*Anna Maria Modée* -- 871120-0363, ammodee@kth.se 

*Daniel Nyberg* -- 900104-4495, dnyb@kth.se 

*Johan Stjernberg* -- 890315-0533, stjer@kth.se

*Andreas Tarandi* -- 890416-0317, taran@kth.se


$TOC$

h1. Introduktion

h2. Syfte

Dokumentets syfte är att specificera detaljer kring produktens arkitektur. Den är speciellt skriven för att underlätta arbetet inom Nyx, men skall också kunna läsas av de som skall underhålla produkten åt kunden Kårspexet. Dokumentet redogör för vilka komponenter som finns, systemdesignen samt en uppskattning av Nyx resurser och genomförbarhet.

h2. Mjukvarans omfattning

Produkten som Nyx utvecklar består av ett webbaserat biljettbokningssystem med ett enkelt användargränssnitt för besökare och administrationsverktyg för Kårspexets personal. Administrationsverktygen består av tre gränssnitt; ett för säljare, ett för ekonomiansvariga och ett för administratörer.

h2. Definitioner akronymer och förkortningar

*Action* (Rails action) _En metod/funktion tillhörande en kontroll i MVC principen._

*Active record* _Teknik för att kommunicera med databaser i objekt-orienterade språk. Objekten i databasen kopplas till objekt i programmet._

*AJAX* (Asynchronous JavaScript and XML) _En teknik för att göra webbsidor mer interaktiva. AJAX tillåter webbläsaren att hämta information från webbservern utan att webbsidan behöver laddas om._

*Apache* _Syftar i detta dokument på webbservern Apache HTTP Server._

*Apache HTTP Server* _Världens mest använda webbserver. Är gratis att använda. [1.3.1]_

*Databas* _En databas är en samling information ordnad på ett sådant sätt att informationen i den effektivt går att hitta._

*Gem* _Term för Ruby on Rails-bibliotek som ger utökad funktionalitet._

*Gränssnitt* _Utformningen av kommunikationen mellan en mjukvarumodul och användare eller annan mjuk-/hårdvara._

*GUI* (Graphical User Interface) _Se gränssnitt._

*HTML* (Hyper Text Markup Language) _Ett språk och webbstandard som används för att beskriva strukturering av text, bilder och annan media på en webbsida._

*HTTP* (HyperText Transfer Protocol) _Ett standardiserat protokoll som definierar hur kommunikation över webben sker._

*HTTPS* (HTTP Secure) _En kombination av HTTP och SSL/TLS med syftet att förhindra avlyssning av HTTP-trafiken_

*Kontroll* (Railscontroller) _En komponent i MVC principen som tar emot händelser/inmatningar från användaren. Kontrollen kan manipulera modeller och väljer vilken vy som ska visas._

*Mjukvara* _Även kallat programvara. En organiserad samling av data och maskininstruktioner._

*Modell* (Railsmodel) _En datastruktur i MVC principen som laddar, sparar och hanterar data genom att vanligtvis arbete mot en databas. Modellen kan innehålla grundläggande logik för att opererea på dadan._

*Model-View-Controller* _Ett koncept som bygger på att separera data (modeller), logik (kontroller) och användarinterface (vyer)._

*MVC* (Model-View-Controller) _Se Model-View-Controller._

*MySQL* _En typ av relationsdatabas baserad på SQL-standarden. Ett relationsdatabas hanteringssystem där flera användare kan arbeta med flera databaser._

*Partial* (Railspartial) _En komponent som tillåter en vy i MVC principen att dela upp en renderingsprocess i flera filer. En vy kan bestå av flera partiella vyer som var och en har en avgränsad uppgift._

*RDoc* (Ruby Doc) _Verktyg för att generera dokumentation för Ruby-källkod i HTML-format._

*Router* (Railsrouter) _En komponent som identifierar URLer och anropar rätt action på en kontroller. Routern kan generera URLer för länkar och knappar i vyer så hårdkodade URLer kan undvikas._

*Ruby* _Ett objektorienterat programmeringsspråk._

*Rails* (Ruby On Rails) _Ett abstrakt mjukvarubibliotek med öppen källkod för utveckling av webbapplikationer._

*SQL* (Structured Query Language) _Ett språk designat för att interagera med databaser._

*URL* (Uniform Resource Locator) _Den formella benämningen av en webbadress. En text som beskriver var en viss resurs på internet finns, samt hur den går att komma åt._

*Vy* (Railsview) _En komponent i MVC principen som renderar innehållet från en modell till ett interaktivbart användargränssnitt. Flera vyer är ofta kopplade till samma modell fast med olika syften._

*Webbläsare* _Ett program som hämtar, tolkar och återger webbsidor kodade exempelvis som HTML._

*Webbserver* _Program som körs på en server och distribuerar webbsidor och/eller andra filer som en webbläsare begär via HTTP-protokollet._

h2. Källor

Referenser till de källor som använts i dokumentet är listade här under. En och samma källa kan refereras vid flera ställen i texten. En referens är på formatet [Sektion.Rubrik.Löpnummer]. Exempelvis är [4.2.1] den första (1) referensen för rubriken "Uppdelningsbeskrivning" (2) under sektion "Systemdesign" (4).

*Apache HTTP Server*
[2011-02-28] http://httpd.apache.org/
Hänvisning till källan görs från referenserna: [1.3.1].

*Ruby on Rails Guides: Getting Started with Rails*
[2011-02-28] http://guides.rubyonrails.org/getting_started.html
Hänvisning till källan görs från referenserna: [4.2.1].

h2. Dokumentöversikt

Detta dokument inleds med en kort introduktion. Efter denna följer sektion 2 som ger en överblick av hela systemet. Detta bör vara utgångspunkten för läsare som inte redan är bekanta med Nyx system.
I sektion 3 beskrivs systemets gränssnitt mot omgivningen. Sektion 4 beskriver systemets interna design, som sedan gås igenom i detalj i sektion 5 där alla delkomponenter beskrivs.

I sektion 6 görs en bedömning av projektets genomförbarhet utifrån uppskattningar av behov och tillgänglighet av resurser, främst arbetstid för t ex programmering och testning. Detta inkluderar en riskbedömning.

Sektion 7 kopplar krav från SRD:n till ADD:n. För varje krav listas de komponenter vars direkta syfte är att uppfylla kravet.

h1. Systemöverblick

Nyx biljettbokningssystem kommer att ersätta det biljettbokningssystemet som för närvarande används av Kårspexet. Det innebär att vårt system kommer användas på Kårspexets webbplats och då vi endast utvecklar biljettbokningssystemet kommer vårt system behöva passa in på den befintliga webbplatsen. Dock ska Nyx systemet inte interagera med det befintliga systemet, annat än med länkar och därmed behöver vi bara anpassa vårt system visuellt.

Ruby on Rails är det ramverk vi kommer använda och kan därmed anses som ett extern system. Övriga externa system som kommer användas av vårt system är MySQL, för att få tillgång till en databas, samt Apache HTTP Server, för att hantera HTTP-kommunikationen med användarens webbläsare.

Nyx valde att utveckla applikationen i dessa externa system eftersom vi hade mycket positiv erfarenhet av dessa inom gruppen. Dessutom så arbetar Ruby on Rails väldigt väl mot MySQL så vi får därmed mycket funktionalitet på köpet när vi använder dem tillsammans. Anledningen till att Apache valdes var för att det är välanvänt, väldokumenterat samt att det är öppen källkod vilket underlättar för oss.

h1. Systemkontext

!diagrampng.png!

Systemet är designat för att köras på en webbserver där alla systemets komponenter befinner sig internt  på servern, som används via ett webbläsarfönster. Apache anropas som i sin tur kör igång Ruby som i förväg har laddat in Rails biblioteket, applikationen och övriga komponenter. Där behandlas anropet och Rails kommer att kommunicera med MySQL och hämtar relaterad data. Rails förbereder sedan resultatet och skickar tillbaka detta till Apache som vidarebefordrar det till klienten som i sin tur presenterar innehållet i webbläsaren. 

h2. Ruby on Rails

Vi kommer använda MVC ramverket Ruby on Rails som ger oss verktyg för webbutveckling i ruby. Det kommer att utgöra grunden i vårat system.

h2. MySQL

Applikationen kommer använda sig av en MySQL databas för att hantera data för de olika användargrupperna. Databasen anropas och relevant data läses in och modifieras från Ruby applikationens olika vyer. 

h2. Apache HTTP Server

Servern kommer att köra Apache HTTP Server för att sköta kommunikationen mellan servern och applikationen. När en användare ansluter tar Apache emot anropet och skickar det vidare till applikationen. Apache kommer även ta emot resultat från applikationen och vidarebefordrar det till användaren. 



h1. Systemdesign

h2. Designmetod

h3. Model-View-Controller

Nyx har valt att följa designprincipen Model-View-Controller för utveckling av systemet. MVC metoden är en metod för att separera modeller, logik och det visuella interfacet i olika komponenter. Modellerna (_Models_) hanterar och lagrar data som är relevant för systemet. De ser även till att ingen ogiltlig data sparas i databasen. Kontroller (_Controllers_) sköter all logik och är ett mellanlager mellan modellerna och interfacet användaren ser. Vyerna (_Views_) i sin tur renderar det interface som användaren ser och sköter postning tillbaka till kontrollerna.

h3. Komponentbeskrivningar

Komponentbeskrivningarna under punkt fem (5) är upplagda enligt följande format.
Alla komponenter har en identifierare på formen 5.Tn, där T är någon av bokstäverna MVCLPX, som står för vilken typ komponenten är, och n är ett tal från ett (1) och uppåt.

I vissa fall används noteringen _@namn_ för variabelnamn. Detta indikerar att variabeln är en instansvariabel.

h4. Komponentrubriker

Alla komponenter har en tabell med följande innehåll.

|_.Typ|Kontroll/Modell/Layout/Vy/Partiell vy/Övrig komponent|
|_.Syfte|Specificerar vilket syfte komponenten fyller. Referenser till SR-krav.|
|_.Funktion|Anger vilka olika funktioner komponenten bidrar med.|
|_.Delkomponenter|Eventuellt andra komponenter som är en del av/ingår i denna.|
|_.Beroenden|Krav för användandet av denna komponent.|
|_.Gränssnitt|Publika metoder som går att anropa. Inkluderar metodnamn och kortare beskrivning av vad metoden gör. Om delar av gränssnittet kräver att användaren är inloggad/admin/accountant/sales ska detta specificeras här.|
|_.Resurser|Vilka resurser (modeller/klasser/gems) som komponenten utnyttjar direkt (ej indirekt).|
|_.Källor|Referenser till information om eventuellt använda gem och andra externa komponenter.|
|_.Process|Lista möjliga arbetsflöden (övergångar).|
|_.Data|Tillgängliga instansvariabler för/som används av komponenten (de som är relevanta från ett externt perspektiv).|

h4. Komponenttyper

h5. M - Model (_Modell_)

En modell representerar en viss typ av data och sköter kopplingen till databasen.

*Specifieringar och tillägg till komponentrubrikerna från 4.1.2*

|_.Syfte|Beskriver hur ett objekt av typen fungerar samt vilka begränsningar som ställs.|
|_.Funktion|En modells funktion är i de flesta fall att representera, skapa och uppdatera en typ av objekt i databasen, samt att validera datan innan insättning och uppdatering. Om ytterligare funktionalitet finns eller om något saknas specificeras det för respektive modell.|
|_.Delkomponenter|Vilka relationer till andra modeller som finns (motsvarande Rails has_many- och belongs_to-nyckelord).|
|_.Beroenden|Krav för att objekt av denna modell ska vara giltig (valideringskrav), inklusive relationer.|
|_.Gränssnitt|I de flesta fall utgörs gränssnittet av de metoder som ärvs av @ActiveRecord::Base@.|
|_.Resurser|ActiveRecord::Base samt de eventuella resurser (modeller/gem) som modellen utnyttjar direkt (ej indirekt).|
|_.Källor|Referenser till information om eventuellt använda gem, externa bibliotek, etc.|
|_.Process|Eventuella valideringssteg eller andra processer för manipulation av objektet (inkluderar ej skapande/sparande/borttagning av objekt).|
|_.Data|Lista med namn, typ och eventuellt beskrivning av modellens attribut. Attributnamn följer lowercase_with_underscore-namngivning. Referenser till objekt i andra modeller tas enbart upp i delkomponenter.|

h5. C - Controller (_Kontroll_)

*Specificeringar och tillägg till komponentrubrikerna från 4.1.2*

|_.Delkomponenter|I de flesta fall ej applicerbart.|
|_.Gränssnitt|Listar och beskriver alla actions. Inkluderar vilka anropsparametrar (@params[]@) som utnyttjas. Actions som kräver att användaren är inloggad eller innehar specifika roller (admin/accountant/sales) nämner detta här.|
|_.Resurser|ApplicationController samt de eventuella resurser (modeller/gem) som kontrollern utnyttjar direkt (ej indirekt).|
|_.Källor|Referenser till information om eventuellt använda gem, externa bibliotek, etc.|
|_.Process|Listar möjliga arbetsflöden (övergångar) mellan actions (new > create, edit > update, index > show/destroy, etc.).|
|_.Data|Instansvariabler som görs tillgängliga för vyerna och som är relevanta från ett externt perspektiv.|

h5. V - View (_Vy_)

Vyerna utgör användargränssnittet. I vårt fall producerar vyerna HTML-kod.

h5. L - Layout

En layout i Rails är en mall för hur en samling av sidor ska se ut. Den innehåller kod som annars skulle behöva finnas i vyerna.

h5. P - Partial (_Partiell vy_)

En partiell vy innehåller kod som är gemensam för flera vyer. Vyer kan inkludera partiella vyer och därmed minska kodupprepning.

h5. X - Övriga/externa komponenter

Komponenter som beskrivs här kan vara komponenter som inte passar in i MVC-modellen eller existerande komponenter.
h2. Uppdelningsbeskrivning

Systemet består av tre komponenttyper enligt MVC-modellen. [4.2.1]

* Modeller
* Vyer
* Kontroller

!mvc.png!

h3.  Modeller

Modeller representerar data som applikationen använder sig av.  Den innehåller och består av regler för hur data kan manipuleras. Modellerna används i Nyx fall för att bestämma hur integrationen med tabeller i databasen skall gå till.  Den större delen av logiken för applikationen finns i Modellen. 

Bokningssystemets modeller kan delas in i följande grupper:

* Föreställningar - Inkluderar föreställningar, omgångar och teatrar. Sköts av administratören.
* Bokningar - Representeras av flera modeller, hanteras av både kunder, säljare, administratör.
* Administrativa modeller - Modeller för användarkonton, rättigheter och mailmallar.

h3. Vyer

Vyer representerar användargränssnittet till applikationen. Detta är olika webbsidor som visar representationer av data som finns i applikationen.

Bokningssystemet har följande grupper av vyer, vilka motsvarar olika användare samt vyer för inloggning:

* Administration
* Ekonomi
* Kund
* Login
* Säljare

h3. Kontroller

Kontroller kopplar samman modeller och vyer. I vårt fall är kontrollerna ansvariga för att hantera de inkommande förfrågningarna som kommer från användarens webbläsare. De hämtar och modifierar data från modellerna och gör den tillgänglig för vyerna.

Bokningssystemet har följande typer av kontroller:

* Administration
* Ekonomiansvarig
* Försäljning
* Kund

h3. Kopplingar mellan modeller och kontroller

$TABLEFORMAT: p{3.4cm} p{11.7cm}$

|_.Modell|_.Modifieras av|
|Theater|TheatersController|
|Section|SectionsController|
|Seat|SeatsController|
|Batch|BatchesController|
|Show|ShowsController|
|Pricing|PricingsController|
|Reservation|BookingController, SalesController, ReservationsController|
|ReservationCounter|BookingController, SalesController, ReservationsController|
|Placement|PlacementsController, SalesController|
|MailTemplate|MailingController|
|User|UsersController|
|Ability||
|UserSession|SessionController|

h1. Komponentbeskrivning

En beskrivning av tabellformat och notationer nedan återfinns under punkt 4.1.

h2. Modeller

$TABLEFORMAT: p{3.5cm} p{11.6cm}$

h3. Bokning

h4. 5.M1 Reservation

|_.Typ|Modell|
|_.Syfte|Håller information om en bokning (SR1.2, SR1.3).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Show.
Har flera Placements.
Har flera ReservationCounters.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste referera till existerande Show.
Måste ha minst en ReservationCounter.
Om inte @creator@ existerar måste @customer_reservation@ vara giltig.|
|_.Resurser|grouped_validations för att hantera valideringar|
|_.Källor|grouped_validations: http://rubydoc.info/gems/grouped_validations/0.2.2/file/README.rdoc|
|_.Process|Valideringsgrupp @customer_reservation@
@email@ måste vara giltig.
@adress@ måste existera.
@post_code@ måste vara giltig.
@post_town@ måste vara giltig.
@paymentoption@ måste finnas.
@deliverymethod@ måste finnas.|
|_.Data|@name : string@
@phone : string@
@email : string@
@adress : string@
@post_code : decimal@
@post_town : string@
@comment : text@
@paymentoption : {plusgiro, kontant, kort} (integer)@
@deliverymethod : {brev, uthämtning} (integer)@
@paid : boolean@
@paid_sum : decimal@
@placed : boolean@
@retrieved : boolean@
@cost : decimal@
@hash_key : string@ - identifierar bokningen vid avbokning.
@creator : integer@|

h4. 5.M2 ReservationCounter

|_.Typ|Modell|
|_.Syfte|Håller information om antal platser i en viss sektion, med ett visst pris för en bokning (SR1.2).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Reservation.
Tillhör en Pricing.
Tillhör en Section.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste ha existerande Reservation, Pricing och Section, samt antal > 0.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@antal : decimal@|

h4. 5.M3 Placement

|_.Typ|Modell|
|_.Syfte|En boknings placeringar (sittplatser) (SR1.5, SR1.11).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Reservation.
Tillhör en Seat.
Tillhör en Show.
Tillhör en User.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste ha existerande Reservation, Show och Seat|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|Inga.|

h3. Föreställningar

h4. 5.M4 Theater

|_.Typ|Modell|
|_.Syfte|Modell för teater (SR1.9, SR1.22).|
|_.Funktion||
|_.Delkomponenter|Har flera Sections.
Har flera Seats, genom Sections.
Har flera Batches.
Har flera Shows, genom Batches.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste ha internal_name, public_name och picture.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@internal_name : string@
@public_name : string@
@description : string@
@comment : string@
@picture : string@ - referens till bild för att visa sektioner och sittplatser.|

h4. 5.M5 Section

|_.Typ|Modell|
|_.Syfte|Modell för sektion (SR1.9, SR1.22, SR1.23, SR1.24).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Theater.
Har flera Seats.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste tillhöra en existerande Theater|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|Inga.|

h4. 5.M6 Seat

|_.Typ|Modell|
|_.Syfte|Modell för sittplats i en teaters sektion (SR1.9, SR1.25).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Section.
Har flera Placements.
Har flera Placement_locks.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste referera till en existerande Section|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@number : integer@ - stolsnummer
@row : integer@ (x,y)-koordinat i teaterns bild eller dylikt.|

h4. 5.M7 Batch

|_.Typ|Modell|
|_.Syfte|Håller information om en omgång (SR1.10).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Theater.
Har flera Shows.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste referera existerande Theater
description får inte vara tom.
Synlighet och startdatum måste finnas.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@description : text@
@visible : boolean@ - Synlighet, huruvida kunden kan se och boka biljetter till omgången.
@start_date : datetime@|

h4. 5.M8 Show

|_.Typ|Modell|
|_.Syfte|Data för en enskild föreställning (SR1.10).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Batch.
Tillhör en Theater, genom Batch.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Måste referera till en existerande Batch.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@date : datetime@|

h4. 5.M9 Pricing

|_.Typ|Modell|
|_.Syfte|I varje Batch har varje Section i teatern normalpris och studentpris. Detta sköts av Pricing-modellen (SR1.30).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Batch.
Tillhör en Section.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|Referenser till Batch och Section måste vara giltiga.
@normal_price@ och @student_price@ måste vara icke-negativa heltal.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@normal_price : integer@
@student_price : integer@|

h3. Administrativa och övriga modeller

h4. 5.M10 User

|_.Typ|Modell|
|_.Syfte|Hålla koll på de olika roller användare kan logga in som (SR1.7, SR9.1, SR9.2).|
|_.Funktion||
|_.Delkomponenter|Tillhör en Ability.|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|@username@ måste vara unikt.
@password@ måste finnas.|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@username : string@
@password : string@
@valid_to : datetime@ - kan vara @nil@, vilket betyder att kontot gäller tills vidare.|

h4. 5.M11 MailTemplate

|_.Typ|Modell|
|_.Syfte|Hantera och mailmallar för färdigformatterade mail (SR1.27).|
|_.Funktion||
|_.Delkomponenter|Inga|
|_.Gränssnitt|Ärver metoder från ActiveRecord::Base, se ActiveRecord.|
|_.Beroenden|@content@ måste finnas.|
|_.Resurser|ActiveRecord::Base|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@description : string@
@title : string@
@content : string@|

h4. 5.M12 UserSession

|_.Typ|Modell|
|_.Syfte|(Se 5.X2 AuthLogic, samt dess dokumentation) (SR1.1)|
|_.Funktion|Håller koll på de sessioner som finns inloggade|
|_.Delkomponenter|Har en User|
|_.Gränssnitt|@find@ Letar upp efterfrågad session om den finns.
@user@ |
|_.Beroenden|Inga|
|_.Resurser|AuthLogic::Base::Session|
|_.Källor|AuthLogic: https://github.com/binarylogic/authlogic|
|_.Process|Ej applicerbart|
|_.Data|Inga|

h4. 5.M13 Ability

|_.Typ|Modell|
|_.Syfte|(Se 5.X3 CanCan, samt dokumentationen) (SR1.1, SR9.2)|
|_.Funktion|Håller koll på vilka rättigheter varje användare har.|
|_.Delkomponenter|Inga|
|_.Gränssnitt|@can@ Returnerar om användaren har rättighet att göra den efterfrågade handlingen.|
|_.Beroenden|Inga|
|_.Resurser|ActiveRecord::Base, CanCan, User|
|_.Källor|CanCan: https://github.com/ryanb/cancan|
|_.Process|Ej applicerbart|
|_.Data|Inga|
h2. Kontroller

h4. 5.C1 ApplicationController

|_.Typ|Kontroller|
|_.Syfte|Rails-applikationens baskontroller som bland annat ska hantera autentisering (SR1.1).|
|_.Funktion|Alla kontroller ärver funktionerna som denna klass definierar, vilket inkluderar autentisering.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|ApplicationController tillhandahåller inga actions utan enbart filter och hjälpmetoder åt övriga kontroller. De hjälpmetoder som definieras är:
@current_user@ - Returnerar en User-instans för den aktiva användaren (försöker logga in via Authlogic om nödvändigt).
@current_user_session@ - Returnerar en UserSession-instans för den aktiva inloggningen (försöker logga in via Authlogic om nödvändigt).
@require_user@ - Hjälpmetod som kastar en exception om den anropas och användaren inte är autentiserad.|
|_.Resurser|AuthLogic och CanCan.|
|_.Källor|Inga|
|_.Process|Filter definerade med @before_filter@ resp. @after_filter@ körs före resp. efter den anropade kontrollerns action.|
|_.Data|Inga|

h3. Kund

h4. 5.C2 BookingController

|_.Typ|Kontroller|
|_.Syfte|Hanterar bokningsproceduren för kunden (SR1.2, SR1.3).|
|_.Funktion|Skapar en ny bokning och sparar den eller avbokar en existerande bokning. Bokningsprocessen delas upp i flera privata metoder som anropas beroende på vilket steg i bokningen man befinner sig i.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|@new@ - påbörjar en bokning
@create@ - sparar data i användarsessionen allt eftersom och vid sista steget lagrar en bokning i databasen
@cancel@ - presenterar en bokning från en hash_key med möjlighet till avbokning via ett formulär
@destroy@ - tar bort en bokning.|
|_.Resurser|ApplicationController, Reservation, ReservationCounter, Batch och Show.|
|_.Källor|Inga|
|_.Process|new > (create)+ > create
cancel > destroy|
|_.Data|@@step@ - steg i bokning
@@steps@ - array med vilka steg som finns
@@reservation@ - bokningsdata|

h3. Inloggning

h4. 5.C3 SessionController

|_.Typ|Kontroller|
|_.Syfte|Hantera inloggning och sessioner (SR1.1).|
|_.Funktion|Skapar ny session vid inloggning, tar bort session vid utloggning.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|@new@ - presenterar inloggningsformuläret
@create@ - tar emot data från formuläret och skapar en ny UserSession
@destroy@ - loggar ut|
|_.Resurser|ApplicationController och UserSession.|
|_.Källor|Inga|
|_.Process|new > create
destroy > new|
|_.Data|Inga|

h3. Admin

h4. 5.C4 AdminIndexController

|_.Typ|Kontroller|
|_.Syfte|Generera data för översikt och statistik (SR1.16, SR1.17, SR1.18).|
|_.Funktion|Presenterar en översikt samt statistiksidorna för administratören och ekonomichefen.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör eller ekonomichef.|
|_.Gränssnitt|@index@ - översikt
@statistics@ - statistik|
|_.Resurser|ApplicationController, Reservation, Batch och Show.|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@@unplaced@ - antal betalade bokningar att placera
@@shows@ - tabell med information om aktuella föreställningar (antal bokade platser mm)
@@stats@ - tabell över föreställningar, sektionsgrupper(prisklass), med antal ordinarie, studenter, gratis, platser kvar|

h4. 5.C5 ReservationsController

|_.Typ|Kontroller|
|_.Syfte|Administrering av bokningar och registrering av betalningar (SR1.12, SR1.13).|
|_.Funktion|Redigering av existerande bokningar samt skapande och borttagning. Ekonomichef kan bara läsa information och registrera betalningar.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör eller ekonomichef.|
|_.Gränssnitt|Ärver resursactions från InheritedResources med undantag för @show@.
@index@ - lista bokningar med ev. filter
@new@, @edit@ - formulär för att redigera alla attributer hos en bokning bortsett från stolsplacering|
|_.Resurser|ApplicationController, InheritedResources och Reservation.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.
@@filters@ - array med möjliga filter samt indikationer för vilka som är aktiva (@index@)|

h4. 5.C6 PlacementsController

|_.Typ|Kontroller|
|_.Syfte|Tilldelning av stolar till webbokningar (SR1.11).|
|_.Funktion|Hanterar stolsplaceringar för en given bokning med stöd för AJAX-anrop.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör.|
|_.Gränssnitt|@new@, @edit@ - presenterar aktuella placeringar och status för alla stolar med möjlighet att placera
@test_multiple@ [AJAX] - validerar placeringar, skapar temporära låsningar och returnerar dess IDn
@update_multiple@ - skapar och uppdaterar nya/existerande placeringar
@destroy@ - tar bort existerande placeringar för given bokning|
|_.Resurser|ApplicationController och Placement.|
|_.Källor|Inga|
|_.Process|new > [test_multiple]+ > update_multiple
edit > [test_multiple]+ > update_multiple
edit > destroy|
|_.Data|@@reservation@ - den aktulla bokningsinstansen
@@placements@ - placeringar
@@theater@ - aktuell teater (bild med mera)
@@show@ - information om föreställningen (datum med mera)
@@seats@ - stolar med positioner och placeringsstatus (upptagen, tillfälligt låst, ledig, vald för denna bokning)|

h4. 5.C7 TheatersController

|_.Typ|Kontroller|
|_.Syfte|Hantera teatrar (SR1.9).|
|_.Funktion|Hantera teatrar, inklusive möjligheten att kopiera existerande. Plus: administrera sektioner och platser.|
|_.Delkomponenter|SectionsController och SeatsController.|
|_.Beroenden|Autentiserad som administratör.|
|_.Gränssnitt|Ärver resursactions från InheritedResources.
@new@ - formulär för att skapa ny teater, inkluderar val att kopiera en existerande teater.|
|_.Resurser|ApplicationController, InheritedResources och Theater.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.
@@theaters@ - existerande teatrars attributer (@new@)|

h4. 5.C8 SectionsController

|_.Typ|Kontroller|
|_.Syfte|Hantera sektioner (SR1.9).|
|_.Funktion|Visa och redigera sektionsindelningar av en existerande teater.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör, nästlad via TheaterController.|
|_.Gränssnitt|Ärver resursactions från InheritedResources med undantag för @show@.
@index@ - visar sektioner för aktuell teater.|
|_.Resurser|ApplicationController, InheritedResources, Theater och Section.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.
@@theater@ - aktuell teater|

h4. 5.C9 SeatsController

|_.Typ|Kontroller|
|_.Syfte|Hantera stolarnas positioner och sektionstillhörighet (SR1.9).|
|_.Funktion|Visa och redigera en given teaters stolar och deras positioner på salongsskissen. AJAX används för att hantera stolar utan att ladda om sidan.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör, nästlad via TheaterController.|
|_.Gränssnitt|@index@ - presenterar gränssnittet för att lägga till och redigera teaterns stolar
@create@ [AJAX] - sparar en ny stol
@update@ [AJAX] - uppdaterar en existerande stol
@destroy@ [AJAX] - tar bort en existerande stol|
|_.Resurser|ApplicationController, Theater och Seat.|
|_.Källor|Inga|
|_.Process|index > [create/update]+|
|_.Data|@@seats@ - existerande stolar
@@theater@ - aktuell teater|

h4. 5.C10 BatchesController

|_.Typ|Kontroller|
|_.Syfte|Hantera omgångar (SR1.10).|
|_.Funktion|Visa och redigera omgångar.|
|_.Delkomponenter|ShowsController och PricingsController.|
|_.Beroenden|Autentiserad som administratör.|
|_.Gränssnitt|Ärver resursactions från InheritedResources med undantag för @show@.|
|_.Resurser|ApplicationController, InheritedResources och Batch.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.|

h4. 5.C11 ShowsController

|_.Typ|Kontroller|
|_.Syfte|Hantera föreställningar (SR1.10).|
|_.Funktion|Hanterar föreställningar som hör till en given omgång.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör, nästlad via BatchesController.|
|_.Gränssnitt|Ärver resursactions från InheritedResources med undantag för @show@.
@index@ - listar alla föreställningar för given omgång|
|_.Resurser|ApplicationController, InheritedResources och Show.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.
@@batch@ - aktuell omgång
@@batches@ - existerande omgångar|

h4. 5.C12 PricingsController

|_.Typ|Kontroller|
|_.Syfte|Hantering av prisklasser (SR1.30).|
|_.Funktion|Administrerng av priser på omgångsnivå. Varje sektion har ett pris för varje rabattklass. Alla pris-/sektions-kombinationer för given omgång administreras på en gång, oavsett om de redan finns eller inte.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör, nästlad via BatchesController.|
|_.Gränssnitt|@index@ - visar formulär för att välja priser för alla sektioner för den aktuella omgången
@update_multiple@ - lagrar informationen med datan från @index@|
|_.Resurser|ApplicationController, Batch, Section och Pricing.|
|_.Källor|Inga|
|_.Process|index > update_multiple > index|
|_.Data|@@batch@ - aktuell omgång
@@sections@ - sektioner i omgångens teater
@@pricings@ - priser för varje sektion- och rabattklasskombination|

h4. 5.C13 UsersController

|_.Typ|Kontroller|
|_.Syfte|Hantera användare och deras lösenord (SR1.7, SR1.8).|
|_.Funktion|Administrering av bokningssystemets användare, inklusive lösenordsändringar och giltighetstid för säljare.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör.|
|_.Gränssnitt|Ärver resursactions från InheritedResources.|
|_.Resurser|ApplicationController, InheritedResources och User.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.|
|_.Data|Se InheritedResources.|

h4. 5.C14 MailingController

|_.Typ|Kontroller|
|_.Syfte|Hantera manuella och automatiska utskick av mail (SR1.14, SR1.15, SR1.27).|
|_.Funktion|Hantera mallar för mail och utskick av mail till förvalda bokningars kontaktpersoner. Nyckelord i mallarna byts ut mot motsvarande bokningsdata vid utskick. Plus: val av mall och editering vid utskick i samma steg med hjälp av AJAX (@index@).|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som administratör.|
|_.Gränssnitt|Ärver resursactions från InheritedResources
@prepare@ - formulär för att skriva och skicka mail utan mall
@preview@ - förhandsgranska mail innan utskick
@send@ - skickar mail|
|_.Resurser|ApplicationController, InheritedResources, Reservation och Mail.|
|_.Källor|Inga|
|_.Process|Standardprocesser för resurser.
ReservationsController#index > index > preview > send - Utskick av existerande mall till valda mottagare.
ReservationsController#index > index > new > create > index > preview > send - Utskick av ny mall till valda mottagare.
ReservationsController#index > index > prepare > send - Utskick av mail utan mall till valda mottagare.|
|_.Data|Se InheritedResources.
@@reciepts = session[:reciepts]@ - mailmottagare (semipermanent)
@@mail = session[:mail]@ - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h3. Ekonomichef

Ekonomichefen har åtkomst till AdminIndexController (för översikt och statistik) respektive ReservationsController (för att redigera existerande bokningars betalningsstatus) per SR1.19.

h3. Säljare

h4. 5.C15 SalesController

|_.Typ|Kontroller|
|_.Syfte|Hantering av säljarens gränssnitt och funktioner (SR1.5, SR1.6, SR1.25).|
|_.Funktion|Möjlighet att genomföra kontantköp (med nya bokningar) samt ta betalt för, och lämna ut existerande bokningars biljetter. @new@ delas upp i flera privata metoder som anropas beroende på vilket steg i bokningen man befinner sig i.|
|_.Delkomponenter|Inga|
|_.Beroenden|Autentiserad som säljare.|
|_.Gränssnitt|@index@ - startsida med länkar till ny respektive sök bokning
@new@ - påbörjar ett nytt kontantköp
@create@ - sparar data i användarsessionen allt eftersom och vid sista steget lagrar en bokning i databasen
@find@ - sök efter existerande bokning
@place@ - stolsplacering av existerande bokning, görs via PlacementsController
@retrieve@ - presentera vilka biljetter som ska hämtas
@payment@ - presenterar hur mycket som ska tas betalt
@finalize@ - uppdaterar bokningens status till betald och utlämnad samt instruerar säljaren om att lämna ut biljetten, går ej att ångra|
|_.Resurser|ApplicationController, Reservation, ReservationCounter och Placement.|
|_.Källor|Inga|
|_.Process|index > new > [place]+ > create > retrieve > payment > finalize > index - nytt kontantköp
index > find > retrieve > finalize > index - lämna ut betald biljett
index > find > retrieve > payment > finalize > index - lämna ut obetald biljett
index > find > place > retrieve > payment > finalize > index - lämna ut oplacerad biljett|
|_.Data|@@step@ - steg i bokning
@@steps@ - array med vilka steg som finns
@@reservation = session[:reservation]@ - bokningsdata|

h2. Vyer

h3. Layouter

h4. 5.L1 admin_layout.html

|_.Typ|Layout|
|_.Syfte|Alla administratörs- och ekonomichefssidor skall ha en gemensam layout (SR1.19, SR1.28)|
|_.Funktion|Renderar en layout för administratörens och ekonomichefens sidor, inklusive meny. De länkar i menyn som visas är beroende på vem som är inloggad, ty ekonomichefen ska inte ha tillgång till alla verktyg som administratören har.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@menu@ – Array med alla menylänkar|

h4. 5.L2 sales_layout.html

|_.Typ|Layout|
|_.Syfte|Säljaren ska ha ett enkelt gränssnitt (SR1.5, SR1.5, SR1.25, SR1.28)|
|_.Funktion|Alla sidor som säljaren använder skall ha samma layout.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|Inga|

h4. 5.L3 simple_layout.html

|_.Typ|Layout|
|_.Syfte|Kårspexets personal behöver en layout till sin inloggning (SR1.1, SR9.2, SR1.28)|
|_.Funktion|Inloggninssidan ska ha en simpel layout med en ruta där användaren kan logga in.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|Inga|

h4. 5.L4 customer_layout.html

|_.Typ|Layout|
|_.Syfte|Alla bokningsprocessens steg ska ha samma layout (SR1.2)|
|_.Funktion|Layout ska matcha Kårspexets nuvarande webbsida och vara användarvänlig för kunden.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@menu@ – Array med alla menylänkar|

h3. Inloggning

h4. 5.V1 SessionController#new.html

|_.Typ|Vy|
|_.Syfte|Användaren ska kunna logga in på systemet (SR1.1, SR9.2)|
|_.Funktion|Renderar inloggningsformuläret.|
|_.Delkomponenter|Inga|
|_.Beroenden|SessionController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L3 simple_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|Inga|

h3. Admin

h4. 5.V2 AdminIndexController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören behöver en snabb, första översiktssida (SR1.19)|
|_.Funktion|Ger en översikt direkt efter inloggning.|
|_.Delkomponenter|Inga|
|_.Beroenden|AdminIndexController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@unplaced - antal betalade bokningar att placera
@shows - tabell med information om aktuella föreställningar (antal bokade platser mm)|

h4. 5.V3 AdminIndexController#stat_standard.html

|_.Typ|Vy|
|_.Syfte|Administratören och ekonomichefen ska ha möjlighet att se statistik (SR1.16)|
|_.Funktion|Visar statistik i form av rådata i en tabell.|
|_.Delkomponenter|Inga|
|_.Beroenden|AdminIndexController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@stats - tabell över föreställningar, sektionsgrupper(prisklass), med antal ordinarie, studenter, gratis, platser kvar|

h4. 5.V4 AdminIndexController#stat_plus.html

|_.Typ|Vy|
|_.Syfte|Administratören och ekonomichefen ska ha möjlighet att se organiserad statistik (SR1.17)|
|_.Funktion|Visar statistik i form av ett flertal tabeller under olika rubriker.|
|_.Delkomponenter|Inga|
|_.Beroenden|AdminIndexController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@stats - tabell över föreställningar, sektionsgrupper(prisklass), med antal ordinarie, studenter, gratis, platser kvar|

h4. 5.V5 AdminIndexController#stat_deluxe.html

|_.Typ|Vy|
|_.Syfte|Administratören och ekonomichefen ska ha möjlighet att se organiserad, grafisk statistik (SR1.18)|
|_.Funktion|Visar statistik i form av en interaktiv graf.|
|_.Delkomponenter|Inga|
|_.Beroenden|AdminIndexController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@stats - tabell över föreställningar, sektionsgrupper(prisklass), med antal ordinarie, studenter, gratis och platser kvar|

h4. 5.V6 ReservationsController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera bokningar och ekonomichefen ska kunna registrera betalningar (SR1.12, SR1.13)|
|_.Funktion|Administratören (ekonomichefen) får en lista med alla bokningar. Bokningarna ska kunna sorteras och filtreras. En mängd bokningar ska kunna väljas ut och registreras som betalda.|
|_.Delkomponenter|Inga|
|_.Beroenden|ReservationsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservations
@filters - array med möjliga filter samt indikationer för vilka som är aktiva (index)|

h4. 5.V7 ReservationsController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera bokningar (SR1.13)|
|_.Funktion|Administratören ska kunna skapa en ny bokning från sitt gränssnitt.|
|_.Delkomponenter|AR5.P1|
|_.Beroenden|ReservationsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen|

h4. 5.V8 ReservationsController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera bokningar (SR1.13)|
|_.Funktion|Visar en bokning. (vilken data?).|
|_.Delkomponenter|Inga|
|_.Beroenden|ReservationsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen|

h4. 5.V9 ReservationsController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera bokningar, inklusive registrera betalningar (SR1.12, SR1.13)|
|_.Funktion|Administratören ska kunna göra ändringar i en bokning, till exempel ändra antalet biljetter, ändra betalstatus, placeringsstatus och så vidare.|
|_.Delkomponenter|AR5.P1|
|_.Beroenden|ReservationsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen|

h4. 5.P1 ReservationsController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Se AR.V9|
|_.Funktion|Renderar ett formulär för att redigera Reservations-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|ReservationsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Reservation|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen|

h4. 5.V10 PlacementsController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna placera ut bokningar (SR1.11, SR1.25)|
|_.Funktion|Administratören ska kunna placera ut platser i den korrekta sektionen som kunden har bokat.|
|_.Delkomponenter|Inga|
|_.Beroenden|PlacementsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen
@placements - placeringar
@theater - aktuell teater (bild mm)
@show - information om föreställningen (datum mm)
@seats - stolar med positioner och placeringsstatus (upptagen, tillfälligt låst, ledig, vald för denna bokning)|

h4. 5.V11 PlacementsController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna placera ut bokningar (SR1.11, SR1.25)|
|_.Funktion|Administratören ska kunna ändra placeringen av en bokning, så länge som den inte har hämtats ut av kunden.|
|_.Delkomponenter|Inga|
|_.Beroenden|PlacementsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@reservation - den aktuella bokningsinstansen
@placements - placeringar
@theater - aktuell teater (bild mm)
@show - information om föreställningen (datum mm)
@seats - stolar med positioner och placeringsstatus (upptagen, tillfälligt låst, ledig, vald för denna bokning)|

h4. 5.V12 TheatersController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera teatrar (SR1.9)|
|_.Funktion|Administratören får en överblick över de teatrar som finns i databasen och vad han kan göra med dem.|
|_.Delkomponenter|Inga|
|_.Beroenden|TheatersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theaters - existerande teatrars attribut|

h4. 5.V13 TheatersController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera teatrar (SR1.9)|
|_.Funktion|Administratören ska genom ett speciellt gränssnitt kunna skapa en ny teater.|
|_.Delkomponenter|AR5.P2|
|_.Beroenden|TheatersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theater - aktuell teater|

h4. 5.V14 TheatersController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera teatrar (SR1.9)|
|_.Funktion|Administratören ska kunna se vilka teatrar som finns.|
|_.Delkomponenter|Inga|
|_.Beroenden|TheatersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theater - aktuell teater|

h4. 5.V15 TheatersController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera teatrar (SR1.9)|
|_.Funktion|Administratören ska kunna göra ändringar till en teater, till exempel om en sektion är under reparation så ska kunder inte kunna boka platser i den.|
|_.Delkomponenter|AR5.P2|
|_.Beroenden|TheatersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theater - aktuell teater|

h4. 5.P2 TheatersController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören ska kunna hantera teatrar (SR1.9)|
|_.Funktion|Renderar ett formulär för att redigera Theaters-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|TheatersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Theater|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theater - aktuell teater|

h4. 5.V16 SectionsController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören och säljaren ska kunna välja sektionsplaceringen (SR1.22, SR1.23)|
|_.Funktion|Administratören och säljaren ska få en överblick över de sektioner som platser kan placeras ut i och hur detta kan göras.|
|_.Delkomponenter|Inga|
|_.Beroenden|SectionsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@sections
@theater - aktuell teater|

h4. 5.V17 SectionsController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören och säljaren ska kunna välja sektionsplaceringen (SR1.22)|
|_.Funktion|Administratören och säljaren ska kunna välja en sektion att placera en boknings platser i.|
|_.Delkomponenter|AR5.P3|
|_.Beroenden|SectionsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@section
@theater - aktuell teater|

h4. 5.V18 SectionsController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören och säljaren ska kunna välja sektionsplaceringen (SR1.22, SR1.23)|
|_.Funktion|Administratören och säljaren ska kunna se alla sektioner som är valbara.|
|_.Delkomponenter|Inga|
|_.Beroenden|SectionsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@theater - aktuell teater|

h4. 5.V19 SectionsController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören och säljaren ska kunna välja sektionsplaceringen (SR1.22)|
|_.Funktion|Administratören ska kunna ändra vilka sektioner som är valbara.|
|_.Delkomponenter|AR5.P3|
|_.Beroenden|SectionsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@section
@theater - aktuell teater|

h4. 5.P3 SectionsController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören och säljaren ska kunna välja sektionsplaceringen (SR1.22)|
|_.Funktion|Renderar ett formulär för att redigera Sections-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|SectionsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Section|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@section
@theater - aktuell teater|

h4. 5.V20 SeatsController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera stolsplacering (SR1.11, SR1.25)|
|_.Funktion|Administratören ska kunna identifiera och placera ut stolar för en given teater.|
|_.Delkomponenter|Inga|
|_.Beroenden|SeatsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@seats
@theater - aktuell teater|

h4. 5.V21 BatchesController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna lägga till omgångar (SR1.10)|
|_.Funktion|Ge en översikt på alla omgångar.|
|_.Delkomponenter|Inga|
|_.Beroenden|BatchesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batches - existerande omgångar|

h4. 5.V22 BatchesController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna lägga till omgångar (SR1.10)|
|_.Funktion|Skapa en ny omgång.|
|_.Delkomponenter|AR5.P4|
|_.Beroenden|BatchesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång|

h4. 5.V23 BatchesController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna lägga till omgångar (SR1.10)|
|_.Funktion|Visa information om en omgång, till exempel alla föreställningar som hör till omgången.|
|_.Delkomponenter|Inga|
|_.Beroenden|BatchesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång|

h4. 5.V24 BatchesController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna lägga till omgångar (SR1.10)|
|_.Funktion|Ändra omgången och vilka föreställningar som ingår i den.|
|_.Delkomponenter|AR5.p4|
|_.Beroenden|BatchesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång|

h4. 5.P4 BatchesController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören skall kunna lägga till omgångar (SR1.10)|
|_.Funktion|Renderar ett formulär för att redigera Batches-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|BatchesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Batch|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång|

h4. 5.V25 ShowsController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna hantera föreställningar (SR1.10, SR1.20)|
|_.Funktion|Ger översikt på alla föreställningar som hör till en vald omgång.|
|_.Delkomponenter|Inga|
|_.Beroenden|ShowsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@shows
@batch - aktuell omgång
@batches - existerande omgångar|

h4. 5.V26 ShowsController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna hantera föreställningar (SR1.10)|
|_.Funktion|Lägga till nya föreställningar till en omgång.|
|_.Delkomponenter|AR5.P5|
|_.Beroenden|ShowsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@show
@batch - aktuell omgång
@batches - existerande omgångar|

h4. 5.V27 ShowsController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna hantera föreställningar (SR1.10)|
|_.Funktion|Visa information om en vald föreställning, till exempel antal lediga platser.|
|_.Delkomponenter|Inga|
|_.Beroenden|ShowsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång
@batches - existerande omgångar|

h4. 5.V28 ShowsController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören skall kunna hantera föreställningar (SR1.10)|
|_.Funktion|Ändra information på en vald föreställning, till exempel datum.|
|_.Delkomponenter|AR5.P5|
|_.Beroenden|ShowsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@show
@batch - aktuell omgång
@batches - existerande omgångar|

h4. 5.P5 ShowsController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören skall kunna hantera föreställningar (SR1.10)|
|_.Funktion|Renderar ett formulär för att redigera Shows-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|ShowsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Show|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@show
@batch - aktuell omgång
@batches - existerande omgångar|

h4. 5.V29 PricingsController#index.html

|_.Typ|Vy|
|_.Syfte|Låter administratören hantera priserna för en omgång (SR1.30).|
|_.Funktion|Visar ett formulär där  man kan välja priser för alla sektioner (för den aktuella omgången).|
|_.Delkomponenter|Inga|
|_.Beroenden|PricingsController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@batch - aktuell omgång
@sections - sektioner i omgångens teater
@pricings - priser för varje sektion- och rabattklasskombination|

h4. 5.V30 UsersController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera systemets användarkonton (SR1.7, SR1.8)|
|_.Funktion|Administratören får en överblick över de användare som finns i systemet och deras rättigheter.|
|_.Delkomponenter|Inga|
|_.Beroenden|UsersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@users|

h4. 5.V31 UsersController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera systemets användarkonton (SR1.7, SR1.8)|
|_.Funktion|Administratören ska kunna skapa en ny användare och sätta dennes rättigheter i systemet.|
|_.Delkomponenter|AR5.P6|
|_.Beroenden|UsersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@user|

h4. 5.V32 UsersController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera systemets användarkonton (SR1.7, SR1.8)|
|_.Funktion|Administratören ska kunna granska en enskild användare och dennes rättigheter.|
|_.Delkomponenter|Inga|
|_.Beroenden|UsersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@user|

h4. 5.V33 UsersController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera systemets användarkonton (SR1.7, SR1.8)|
|_.Funktion|Administratören ska kunna ändra en användares rättigheter eller lösenord, till exempel säljare som inte ska säljare längre.|
|_.Delkomponenter|AR5.P6|
|_.Beroenden|UsersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@user|

h4. 5.P6 UsersController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören ska kunna hantera systemets användarkonton (SR1.7, SR1.8)|
|_.Funktion|Renderar ett formulär för att redigera User-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|UsersController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|User|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@user|

h4. 5.V34 MailingController#index.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14)|
|_.Funktion|Ge en överiskt på bland annat sparade mailmallar.|
|_.Delkomponenter|Inga|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mailing
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h4. 5.V35 MailingController#new.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14)|
|_.Funktion|Skapa en ny mailmall för att skicka till en eller flera mottagare.|
|_.Delkomponenter|AR5.P7|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mail
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h4. 5.V36 MailingController#show.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14, SR1.15)|
|_.Funktion|Visa en mailmall som sparats. |
|_.Delkomponenter|Inga|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mail
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h4. 5.V37 MailingController#edit.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14)|
|_.Funktion|Innehåll i en befintlig mailmall.|
|_.Delkomponenter|AR5.P7|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mail
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h4. 5.V38 MailingController#preview.html

|_.Typ|Vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14)|
|_.Funktion|Förhandsgranska de mail som ska skickas innan utskick.|
|_.Delkomponenter|Inga|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L1 admin_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mail
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h4. 5.P7 MailingController#_form.html

|_.Typ|Partiell vy|
|_.Syfte|Administratören ska kunna hantera mailutskick (SR1.14)|
|_.Funktion|Renderar ett formulär för att redigera Mailing-objekt.|
|_.Delkomponenter|Inga|
|_.Beroenden|MailingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Mail|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@mail
@reciepts = session[:reciepts] - mailmottagare (semipermanent)
@mail = session[:mail] - den aktuella mailmallen, kan vara temporär för att möjliggöra utskick utan mall|

h3. Säljare

h4. 5.V39 SalesController#index.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6, SR1.25)|
|_.Funktion|Visa en översikt på säljarens möjliga sysslor, kontantköp och utlämning av bokade biljetter.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V40 SalesController#show_choice.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6, SR1.25, SR1.21)|
|_.Funktion|Välja vilken föreställning som ärendet gäller.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V41 SalesController#seats.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.24, SR1.25)|
|_.Funktion|Välja vilken plats som ärendet gäller.|
|_.Delkomponenter|Inga|
|_.Beroenden|Om administratören inte har placerat ut den redan bokade platsen så gör säljaren det, men sektionsvalet är redan låst. Om det är ett nytt köp, placerar säljaren också ut platsen. SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V42 SalesController#confirm.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6, SR1.26)|
|_.Funktion|Fråga användaren om de angivna uppgifterna är korrekta och skall införas i systemet.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V43 SalesController#retrieve.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6)|
|_.Funktion|Uppmana säljaren att gå och hämta en viss biljett.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V44 SalesController#payment.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6)|
|_.Funktion|Uppmana säljaren att ta betalt för bokningen.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V45 SalesController#hand_out.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6)|
|_.Funktion|Uppmana säljaren att lämna ut biljetten.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h4. 5.V46 SalesController#search.html

|_.Typ|Vy|
|_.Syfte|En säljare ska kunna genomföra ett kontantköp och lämna ut biljetter (SR1.5, SR1.6, SR1.25, SR1.20)|
|_.Funktion|Låter säljaren söka bland bokningar med exempelvis namn.|
|_.Delkomponenter|Inga|
|_.Beroenden|SalesController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L2 sales_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation = session[:reservation] - bokningsdata|

h3. Kund

h4. 5.V47 BookingController#show_choice.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna boka sin biljett via Kårspexets webbsida (SR1.2, SR1.21)|
|_.Funktion|Kunden får ett val om vilken föreställning.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L4 customer_layout.html |
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h4. 5.V48 BookingController#section.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna boka sin biljett via Kårspexets webbsida (SR1.2, SR1.24)|
|_.Funktion|Kunden väljer vilken sektion som denne vill boka på den valda föreställningen.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L4 customer_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h4. 5.V49 BookingController#payment.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna boka sin biljett via Kårspexets webbsida (SR1.2, SR1.4 i delux)|
|_.Funktion|Kunden fyller i sin betalningsinformation och hur kunden vill hämta sin biljett.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L4 customer_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h4. 5.V50 BookingController#confirm.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna boka sin biljett via Kårspexets webbsida (SR1.2, SR1.26)|
|_.Funktion|Kunden bekräftar bokningen och alla betalningsuppgifter.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L4 customer_layout.html |
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h4. 5.V51 BookingController#cancel_booking.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna avboka sin biljett via Kårspexets webbsida (SR1.2, SR1.3)|
|_.Funktion|Kunden avbokar sin bokning via en länk i sitt bekräftelsemail.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|Inga|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h4. 5.V52 BookingController#destroy.html

|_.Typ|Vy|
|_.Syfte|Kunden ska kunna avboka sin biljett via Kårspexets webbsida (SR1.2, SR1.3)|
|_.Funktion|Kunden får en bekräftelse att bokningen är avbokad.|
|_.Delkomponenter|Inga|
|_.Beroenden|BookingController|
|_.Gränssnitt|Ej applicerbart|
|_.Resurser|5.L4 customer_layout.html|
|_.Källor|Inga|
|_.Process|Ej applicerbart|
|_.Data|@step - steg i bokning
@steps - array med vilka steg som finns
@reservation - bokningsdata|

h2. Övriga komponenter

h4. 5.X1 InheritedResources

|_.Typ|Övrig komponent (Rails-gem)|
|_.Syfte|Abstraherar bort hantering av resurser för kontroller som hanterar dessa för att minimera kodupprepning.|
|_.Funktion|Tillhandahåller alla de (eller valfria) standardactions för kontroller som hanterar resurser och ärver från denna klass.|
|_.Delkomponenter|Inga|
|_.Beroenden|Inga|
|_.Gränssnitt|Alla kontrollers som ärver från denna klass får standardactions för resurser (@index@, @show@, @new@, @create@, @edit@, @update@ samt @destroy@) fördefinierade om inget annat anges.
@actions@ - Hjälpmetod för att specificera vilka actions som ska fördefinieras.
Hjälpmetoder som görs tillgängliga i vyer:
@resource@ - Enskild instans av den representerade resursen (i @show@, @new@, @create@, @edit@, @update@, @destroy@).
@collection@ - En array innehållandes alla objekt av resursen (endast i @index@).
@resource_class@ - En referens till den modell (klassdefinitionen) som hanteras som resurs.|
|_.Resurser|InheritedResources::Base (ingår i Rails-gemet inherited_resources).|
|_.Källor|inherited_resources: https://github.com/josevalim/inherited_resources|
|_.Process|Ej applicerbart|
|_.Data|Instansvariabler av formatet @modellnamn (ex. @reservation för ReservationsController) respektive @modellnamn_i_plural för index-actions (ex. @reservations).|

h4. 5.X2 AuthLogic

|_.Typ|Övrig komponent (Rails-gem)|
|_.Syfte|Hanterar autentisering och användarsessioner (SR1.1).|
|_.Funktion|Tillhandahåller funktioner för att autentisera användare utifrån existerande modeller.|
|_.Delkomponenter|UserSession.|
|_.Beroenden|Inga|
|_.Gränssnitt|Authlogic::Session::Base#find - returnerar aktiv användarsession eller försöker initiera en ny om ingen redan finns
ActiveRecord::Base#acts_as_authentic - instruerar Authlogic att den aktuella modellen representerar en typ av autentisering|
|_.Resurser|Authlogic (ingår i Rails-gemet authlogic), UserSession och User.|
|_.Källor|authlogic: https://github.com/binarylogic/authlogic|
|_.Process|Ej applicerbart|
|_.Data|Inga|

h4. 5.X3 CanCan

|_.Typ|Övrig komponent (Rails-gem)|
|_.Syfte|Definierar och hanterar användarroller (SR9.2).|
|_.Funktion|Tillhandahåller metoder för att bestämma vilka användarroller som finns samt vad dessa har rättigheter till. Definierar även hjälpmetoder för att testa rättigheter mot den inloggade användaren.|
|_.Delkomponenter|Ability|
|_.Beroenden|En metod @ApplicationController#current_user@ måste definieras så att den returnerar ett objekt.|
|_.Gränssnitt|@can?@ - returnerar huruvida användaren har rättigheter för att utföra en viss handling (tillgänglig i vyer och kontroller)
@cannot?@ - inversen av @can?@
@ApplicationController#authorize!@ - kastar en exception om användaren inte har rättighet att utföra den handling som angivits.
@ApplicationController#load_and_authorize_resource@ - ladda in och autorisera alla standardactions för resurser automatiskt|
|_.Resurser|CanCan (ingår i Rails-gemet cancan) och Ability.|
|_.Källor|cancan: https://github.com/ryanb/cancan|
|_.Process|1. Rättigheter fördefinieras i Ability-modellen.
2. @can?(:action, Object)@ anropas (:action = någon fördefinierad action, Object är någon modell alternativt en modellinstans).
3. CanCan hämtar aktiv användare via @ApplicationController#current_user@.
4. Användarens rättigheter undersöks av CanCan genom att skicka denna till Ability-modellen.
5. @can?@-metoden returnerar huruvida rättigheter finns (eller saknas) för att utföra handlingen.|
|_.Data|Inga|

h4. 5.X4 ActiveRecord

|_.Typ|Övrig komponent (Rails)|
|_.Syfte|ActiveRecord är en existerande baskomponent i Rails-ramverket som bland annat fungerar som ett gränssnitt till databasens tabeller (SR1.29). |
|_.Funktion|Tillhandahåller gränssnitt för sökningar och manipulation av objekt databasen. Implicit ingår databas och databasschema i varje modell.|
|_.Delkomponenter| Inga|
|_.Gränssnitt|Objektorienterat gränssnitt enligt active-record-patternen. En modell är en klass som ärver från ActiveRecord::Base och motsvarar en tabell i databasen. En instans av klassen motsvarar en rad i tabellen.
Följande är några av de metoder som definieras av @ActiveRecord::Base@ och är tillgängliga för alla modeller.
@all@ - hämta alla instanser av modellen (alla rader i databastabellen).
@find@ - gör diverse sökningar i databasen och returnerar de instanser som matchar.
@valid?@ - kontrollera att objektets data är korrekt. Vilka kontroller som görs definieras av varje modell.
@save@ - lagrar/uppdaterar en instans av ett modell.
@update@ - uppdaterar attributer för en instans i databastabellen.
@destroy@ - raderar objektet i databasen.
Dessutom finns accessors för varje attribut hos modellen. Dessa definieras dynamiskt.|
|_.Beroenden|Inga|
|_.Resurser|Inga|
|_.Källor|ActiveRecord: http://ar.rubyonrails.org|
|_.Process|Följande typscenario visar skapande och uppdatering av en instans av modellen @M@.
@m = M.new@
@m.att1 = "value"@
@if m.valid?@
@then m.save@|
|_.Data|Alla modeller har datafälten @created_at@ respektive @updated_at@ av typen @timestamp@. Dessa uppdateras automatiskt av Rails vid skapande och uppdatering av objektet.
Alla modeller har även attributet @id@ som primärnyckel.
För övriga attribut se respektive modell. Enkla attribut listas, relationer till andra modeller beskrivs i delkomponenter.|


h1. Genomförbarhet- och resursuppskattning

h2. Sammanfattning av slutsatser av en genomförbarhetsundersökning av arkitekturmodellen.

Nyx kommer att följa den så kallade MVC-principen (Model-View-Controller). Alla komponenter under respektive punkt finns angivna nedan. I designen ser vi endast två delar som kommer att vara mer komplicerade, nämligen teaterdesignen och stolsplaceringen. Dessa är dock fullt genomförbara, eftersom det inte är avancerade tekniker som används, utan komplexiteten härstammar främst från att det är mycket data som ska redigeras samtidigt. Inga större förändringar av arkitekturen förutses för de komplicerade delarna nämnda ovan. Slutsatsen är således att projektet är fullt genomförbart med den här arkitekturen.

h2. Komponentprioritering

h3. Modeller

$TABLEFORMAT: p{10cm} p{5.1cm}$
|_.Komponent|_.Prioritet|
| 5.M1 Reservation| Standard |
| 5.M2 ReservationCounter| Standard |
| 5.M3 Placement| Standard |
| 5.M4 Theater| Standard |
| 5.M5 Section| Standard |
| 5.M6 Seat| Standard |
| 5.M7 Batch| Standard |
| 5.M8 Show| Standard |
| 5.M9 Pricing| Standard |
| 5.M10 User| Standard |
| 5.M11 MailTemplate| Standard |
| 5.M12 UserSession| Standard |
| 5.M13 Ability| Standard |


h3. Kontroller

|_.Komponent|_.Prioritet|
| 5.C1 ApplicationController | Standard |
| 5.C2 BookingController | Standard |
| 5.C3 SessionController | Standard |
| 5.C4 AdminIndexController | Standard |
| 5.C5 ReservationsController | Standard |
| 5.C6 PlacementsController | Standard |
| 5.C7 TheatersController | Standard |
| 5.C8 SectionsController | Standard |
| 5.C9 SeatsController | Standard |
| 5.C10 BatchesController | Standard |
| 5.C11 ShowsController | Standard |
| 5.C12 PricingsController | Standard |
| 5.C13 UsersController | Standard |
| 5.C14 MailingController | Standard |
| 5.C15 SalesController | Standard |

h3. Vyer

|_.Komponent|_.Prioritet|
| 5.L1 admin_layout.html | Standard |
| 5.L2 sales_layout.html | Standard |
| 5.L3 simple_layout.html | Standard |
| 5.L4 customer_layout.html | Standard |
| 5.V1 SessionController#new.html | Standard |
| 5.V2 AdminIndexController#index.html | Plus |
| 5.V3 AdminIndexController#stat_standard.html | Standard |
| 5.V4 AdminIndexController#stat_plus.html | Plus |
| 5.V5 AdminIndexController#stat_deluxe.html | Deluxe |
| 5.V6 ReservationsController#index.html | Standard |
| 5.V7 ReservationsController#new.html | Standard |
| 5.V8 ReservationsController#show.html | Standard |
| 5.V9 ReservationsController#edit.html | Standard |
| 5.P1 ReservationsController#_form.html | Standard |
| 5.V10 PlacementsController#new.html | Standard |
| 5.V11 PlacementsController#edit.html | Standard |
| 5.V12 TheatersController#index.html | Standard |
| 5.V13 TheatersController#new.html | Standard |
| 5.V14 TheatersController#show.html | Standard |
| 5.V15 TheatersController#edit.html | Standard |
| 5.P2 TheatersController#_form.html | Standard |
| 5.V16 SectionsController#index.html | Standard |
| 5.V17 SectionsController#new.html | Standard |
| 5.V18 SectionsController#show.html | Standard |
| 5.V19 SectionsController#edit.html | Standard |
| 5.P3 SectionsController#_form.html | Standard |
| 5.V20 SeatsController#index.html | Standard |
| 5.V21 BatchesController#index.html | Standard |
| 5.V22 BatchesController#new.html | Standard |
| 5.V23 BatchesController#show.html | Standard |
| 5.V24 BatchesController#edit.html | Standard |
| 5.P4 BatchesController#_form.html | Standard |
| 5.V25 ShowsController#index.html | Standard |
| 5.V26 ShowsController#new.html | Standard |
| 5.V27 ShowsController#show.html | Standard |
| 5.V28 ShowsController#edit.html | Standard |
| 5.P5 ShowsController#_form.html | Standard |
| 5.V29 PricingsController#index.html | Standard |

|_.Komponent|_.Prioritet|
| 5.V30 UsersController#index.html | Standard |
| 5.V31 UsersController#new.html | Standard |
| 5.V32 UsersController#show.html | Standard |
| 5.V33 UsersController#edit.html | Standard |
| 5.P6 UsersController#_form.html | Standard |
| 5.V34 MailingController#index.html | Standard |
| 5.V35 MailingController#new.html | Standard |
| 5.V36 MailingController#show.html | Standard |
| 5.V37 MailingController#edit.html | Standard |
| 5.V38 MailingController#preview.html | Standard |
| 5.P7 MailingController#_form.html | Standard |
| 5.V39 SalesController#index.html | Standard |
| 5.V40 SalesController#show_choice.html | Standard |
| 5.V41 SalesController#seats.html | Standard |
| 5.V42 SalesController#confirm.html | Standard |
| 5.V43 SalesController#retrieve.html | Standard |
| 5.V44 SalesController#payment.html | Standard |
| 5.V45 SalesController#hand_out.html | Standard |
| 5.V46 SalesController#search.html | Standard |
| 5.V47 BookingController#show_choice.html | Standard |
| 5.V48 BookingController#section.html | Standard |
| 5.V49 BookingController#payment.html | Standard |
| 5.V50 BookingController#confirm.html | Standard |
| 5.V51 BookingController#cancel_booking.html | Standard |
| 5.V52 BookingController#destroy.html | Standard |

h3. Övriga komponenter

|_.Komponent|_.Prioritet|
| 5.X1 InheritedResources| Standard |
| 5.X2 AuthLogic | Standard |
| 5.X3 CanCan| Standard |
| 5.X4 ActiveRecord| Standard |

h2. Framtida projektuppgifter med tidsuppskattning

$TABLEFORMAT: p{1cm} p{4.5cm} p {6.5cm} p{3cm}$ 
|_.Nr|_.Benämning |_.Beskrivning|_.Tidsuppskattning|
| 1 | Modellskelett | Skelett inklusive relationer och attribut | 5h |
| 2 | Skelett för kontroller | Definiera tomma actions | 5h |
| 3 | Routes | Skapa standardroutes för resurser | 2h |
| 4 | Kontroller-logik | Logik för kontroller som hanterar resurser med InheritedResources | 10h |
| 5 | Redigeringsvyer | Grundläggande vyer (formulär) för att redigera omgångar/föreställningar | 10h |
| 6 | Indexvyer | Enkla vyer för index av omgång/föreställning | 3h |
| 7 | Teatervyer | Grundläggande versioner av vyer för administrering av teatrar (enbart attribut) | 3h |
| 8 | Sektionsredigering | Vyer för att redigera sektioner (inklusive polygonkoordinater) | 8h | 
| 9 | Platsgränssnitt | Vy och gränssnittslogik för utplacering av platser i teatrar | 15h |
| 10 | Adminlayout | Designa och implementera administratörslayouten | 8h |
| 11 | Bokningslistning | Listning och en enkel filtring av bokningar | 10h |
| 12 | Bokningsredigering | Administratörsvy för att redigering av bokningar | 5h |
| 13 | Bokningssteg | Implementera grundläggande stegnavigering med databeständighet | 20h |
| 14 | Kundbokningslayout | Layouter för kundens bokningsprocess | 10h |
| 15 | Bokningsvyer | Vyer och gränssnittslogik för bokningsprocedurens olika steg | 25h |
| 16 | Placeringsgränssnitt | Gränssnitt för placering av bokningar | 20h |
| 17 | Prishantering | Hantering av priser (formulär och generering) | 15h |
| 18 | Omgångs/föreställningskrav | Validerings- och övriga krav på omgångar, föreställningar och prissättningar | 10h |
| 19 | Teaterkrav | Validerings- och integritetskrav för teatrar, sektioner och platser | 15h |
| 20 | Bokningskrav | Krav för bokningar (Reservation, ReservationCounter) | 10h |
| 21 | Placeringskrav | Integritetskrav och övrig logik för placeringar och dess relationer | 10h |
| 22 | Bokningsfilter | Avancerat filter av bokningar | 10h |
| 23 | Mailmallar | Administreringsvy för mailmallar(skapa/redigera/ta bort) | 10h |
| 24 | MailingController | MailingController - resurshantering | 3h |
| 25 | Mailgenerering | Generering av mail utifrån bokningar | 15h |

$TABLEFORMAT: p{1cm} p{4.5cm} p {6.5cm} p{3cm}$ 
| 26 | Mailutskick | Processen från bokningslistan till utskicken med data inlagd i vald mall | 15h |
| 27 | Förhandsgranskning | Förhandsgranskning av mailutskick - vy och logik | 10h |
| 28 | User-modellen | Krav på attribut och roll-testmetoder | 5h |
| 29 | Ability-klassen | Ability-klassen med roll-logik och rättighetsdefinitioner (med CanCan som grund) | 10h |
| 30 | Autentisering | Autentisering i ApplicationController, UserSession-modellen (Authlogic) samt SessionController | 10h |
| 31 | Simplelayouten | Design och implementation av layouten för bland annat inloggning | 2h |
| 32 | Inloggningsvy | Inloggningsvy med formulär | 3h |
| 33 | UsersController | Administrering av användare | 5h |
| 34 | Användarvyer | Vyer för användaradministrering | 6h |
| 35 | Lösenordsgenerering | Lösenordsgenerering för användare | 2h |
| 36 | Användaravstängning | Hindra avstängda användare från att logga in | 1h |
| 37 | Säljarvyer1 | Vyer för placerade, färdiga bokningar (uthämtningsproceduren) | 5h |
| 38 | SalesController1 | Logik för uthämtning/betalning av existerande bokningar | 15h |
| 39 | Säljarvyer2 | Vyer för kontantförsäljning (inklusive platsfördelning) samt utplacering | 15h |
| 40 | SalesController2 | Logik för kontantköp och utplacering av platser | 15h |
| 41 | AdminIndexController | Översiktssidan (action och vy) | 5h |
| 42 | Statistik | Logik (förberedande och bearbetande av statistikdata) i AdminIndexController |  10h |
| 43 | Statistikvyer | Vy för presentation av statistik | 5h |
| 44 | Gränssnittsbegränsning | Infoga logik i Admin-layouten för att begränsa gränssnittet för ekonomichefer | 2h |

h2. Beroenden mellan uppgifter

Vad gäller komponenterna och då speciellt vyer kan man se beroenden mellan vy och kontroller på följande sätt; AdminIndexController#new.html har AdminIndexController som beroende.

$TABLEFORMAT: p{5cm} p{7cm}$
|Uppgift|Beroende av uppgift|
|1|Inga|
|2|Inga|
|3|2|
|4|1, 2|
|5|Inga|
|6|Inga|
|7|Inga|
|8|Inga|
|9|1|
|10|Inga|
|11|1|
|12|4|
|13|1|
|14|Inga|
|15|14|
|16|9|
|17|4|
|18|1|
|19|1|
|20|1|
|21|1|
|22|11|
|23|1|
|24|Inga|
|25|24|
|26|25|
|27|25|
|28|Inga|
|29|28|
|30|29, 28|
|31|Inga|
|32|Inga|
|33|28|
|34|28|
|35|33, 28|
|36|33, 28|
|37|Inga|
|38|Inga|
|39|Inga|
|40|Inga|
|41|Inga|
|42|41|
|43|42|
|44|10, 30|

h2. Uppgiftsplanering

Siffrorna nedan korresponderar med uppgifterna ovan.

$TABLEFORMAT: p{2cm} p{2cm} p{2cm} p{2cm} p{2cm} p{2cm}$
|_.Namn |_.Vecka 10 |_.Vecka 11 |_.Vecka 12 |_.Vecka 13 |_.Vecka 14 |
|_.Victor H |1,2,3,4|10,11|13|22,28|29,30|
|_.Andreas T|5,6|17|15|24,25|26,27|
|_.Rasmus G|9|9|15|16|16|
|_.Erik E| 19|12|17|38|33|
|_.Per H|7,8|14|23|31,32|34,37,43|
|_.Kalle A|18|19|20,21|41,42|43|
|_.André G|||Utvecklar gränssnitt|Utvecklar gränssnitt|Utvecklar gränssnitt|
|_.Peter B|Utvecklar tester|Utvecklar tester|Testar|Testar|Testar|
|_.Johan S|Synka uppstart|Samordna, resurs|Resurs|Testar|Resurs|
|_.Anna Maria M|Utvecklar tester|Utvecklar tester|Testar|Testar|Testar|
|_.Daniel N|Utvecklar tester|Utvecklar tester|Utvecklar gränssnitt|Utvecklar gränssnitt|Testar|

$TABLEFORMAT: p{2.5cm} p{2cm} p{2cm} p{2cm} p{2cm} p{2cm}$
|_.Namn |_.Vecka 15 |_.Vecka 16 |_.Vecka 17 |_.Vecka 18 |_.Vecka 19 |
|_.Victor H |35,36|44|Buggfixar|Finputsar| Demo |
|_.Andreas T|27||Buggfixar|Finputsar| Installerar |
|_.Rasmus G|39,40||Testar|Testar|Testar|
|_.Erik E|40|||Testar|Testar|
|_.Per H||||Testar|Demo|
|_.Kalle A||||Testar|Demo|
|_.André G|Utvecklar gränssnitt|Testar|Testar|Skriver sammanfattning| Skriver sammanfattning |
|_.Peter B|Testar|Testar|Testar|Testar|Testar|
|_.Johan S|Testar|Testar|Samordna, resurs|Testar|Demo|
|_.Anna Maria M|Testar|Testar|Testar|Testar|Testar|
|_.Daniel N|Testar|Testar|Testar|Testar|Testar|

h2. Möjliga risker 

Projektplaneringen visar att tiden kommer att räcka för att slutföra projektet och hittills har samarbetet fungerat väl. Nyx har ingen nyckelkompetens som gör oss beroende av en enstaka projektmedlem. Den största risken ligger i att Kårspexet inte anser kraven uppfyllda eller kommer med ändringar i kraven. Då kommer det vara ont om tid för att korrigera dessa och det ger oss ingen marginal för fel. Vi kommer undvika detta genom ett nära samarbete med Kårspexet under implementationen. De kommer dessutom att ha en viktig roll under testningen som skall inledas i god tid. 

I övrigt har vi identifierat följande risker:
* Risk att vi implementerar fel funktionalitet (annat än det efterfrågade) och därmed förlorar tid. Det kommer vi undvika genom kontinuerlig kontakt med Kårspexet, om frågor uppstår så kommer de att diskuteras igenom grundligt, ingen gissning kommer pågå, samt att genomgående under implementation återgå till kraven i URD och SRD.

* Risk att Nyx inte hinner implementera alla funktioner som efterfrågas. För att undvika den här situationen har vi en tidsplanering med god marginal för oförutsedda uppgifter.

* Risk att vi implementerar saker i fel ordning så att vi förlorar tid på att vänta på varandra. Här kommer nyckelkompetens in i beräkningarna. Återigen ligger lösningen i en bra planering och bra kontroll på beroenden mellan kontrollerna.

* Risk att vår utvecklingsserver krånglar. Det som skulle hända är att vi inte har en gemensam git-server att skicka uppdaterat arbete till. Det är i sig inte ett stort problem, alla utvecklare har lokala versioner och kan fortsätta jobba tills servern kommer upp igen.

* Risk att det krånglar när vi ska installera vårt system på Kårspexets server. För att hitta eventuella problem i tid kommer vi tidigt installera en demo av bokningssystemet. På så sätt hinner vi korrigera felen i tid för deadline.

h1. Spårningsmatris

Följande tabell listar mjukvarukrav från SRD:n. För en enklare överblick över vilka mjukvarukrav ett specifikt systemkrav härstammar ifrån, se de specifika kraven i sektion 5.

h2. Funktionella krav

$TABLEFORMAT: p{2cm} p{14cm}$
|Kravkälla|Krav|
|SR1.1|AR.M12, AR.M13, AR.C1, AR.C3, AR.L3, AR.V1, AR.X2|
|SR1.2|AR.M1, AR.M2, AR.C2, AR.L4, AR.V47, AR.V48, AR.V49, AR.V50, AR.V51, AR.V52|
|SR1.3|AR.M1, AR.C2, AR.V51, AR.V52|
|SR1.4|AR.V49|
|SR1.5|AR.M3, AR.C15, AR.L2, AR.V39, AR.V40, AR.V41, AR.V42, AR.V43, AR.V44, AR.V45, AR.V46|
|SR1.6|AR.C15, AR.V39, AR.V40, AR.V42, AR.V43, AR.V44, AR.V45, AR.V46|
|SR1.7|AR.M10, AR.C13, AR.V30, AR.V31, AR.V32, AR.V33, AR.P6|
|SR1.8|AR.C13, AR.V30, AR.V31, AR.V32, AR.V33, AR.P6|
|SR1.9|AR.M4, AR.M5, AR.M6, AR.C7, AR.C8, AR.C9, AR.V12, AR.V13, AR.V14, AR.V15, AR.P2|
|SR1.10|AR.M7, AR.M8, AR.C10, AR.C11, AR.V21, AR.V22, AR.V23, AR.V24, AR.V25, AR.V26, AR.V27, AR.V28, AR.P4, AR.P5|
|SR1.11|AR.M3, AR.C6, AR.V10, AR.V11, AR.V20|
|SR1.12|AR.C5, AR.V6, AR.V9|
|SR1.13|AR.C5, AR.V6, AR.V7, AR.V8, AR.V9, AR.P1|
|SR1.14|AR.C14, AR.V34, AR.V35, AR.V36, AR.V37, AR.V38, AR.P7|
|SR1.15|AR.C14, AR.V36|
|SR1.16|AR.C4, AR.V3|
|SR1.17|AR.C4, AR.V4|
|SR1.18|AR.C4, AR.V5|
|SR1.19|AR.L1, AR.V2|
|SR1.20|AR.V25, AR.V46|
|SR1.21|AR.V40, AR.V47|
|SR1.22|AR.M4, AR.M5, AR.V16, AR.V17, AR.V18, AR.V19, AR.P3|
|SR1.23|AR.M5, AR.V16, AR.V18|
|SR1.24|AR.M5, AR.V41, AR.V48|
|SR1.25|AR.M6, AR.C15, AR.L2, AR.V10, AR.V11, AR.V20, AR.V39, AR.V40, AR.V41, AR.V46|
|SR1.26|AR.V42, AR.V50|
|SR1.27|AR.M11, AR.C14|
|SR1.28|AR.L1, AR.L2, AR.L3|
|SR1.29|AR.X4|
|SR1.30|AR.M9, AR.C12, AR.V29|
|SR1.31|Tidsmätning loggas automatiskt av Rails.|

h2. Icke-funktionella krav

$TABLEFORMAT: p{2cm} p{14cm}$
|Kravkälla|Krav|
|SR9.1|AR.M10|
|SR9.2|AR.M10, AR.M13, AR.L3, AR.V1, AR.X3|

h1. Appendix
