Homework IV, Foundations of Cryptography 2012

	Peter BostrÃ¶m, pbos@kth.se, 890224-0814

Attempted problems:

	1: 4T
	2: ?
	3: 2+2 = 4T
	4: 4T
	5: 3T

	sum: 0I + 0T


1: Collision resistance of Strong-RSA-based hash function

Finding a multiple of the order of g when chosen randomly in Z*n is assumed to
be hard. More formally, the assumption means that for any polynomial-time
adversary A with g chosen randomly in Z*n and n=p*q where p and q are two safe
primes of approximately the same size

	Pr[A(g, n) = k*ord(g)] is negligible.

Finding a collision for the hash function means finding two separate x, x2 for
which g^x = g^x2 mod N. This means we can calculate dx = (x-x2) as a multiple
of ord(g), dx = k*ord(g).

To construct an adversary A' for finding multiples of ord(g):

A'(g, n):
	(x, x2) = A(g, n)
	return |x-x2|

Whenever A succeeds to generate a collision, A' will generate a multiple of
ord(g). Therefore finding collisions in our keyed hash function must be at
least as hard as finding a multiple of g's order in Z*n.

Our initial assumption states that the probability of A' succeeding is
negligible, therefore, the probability of any A succeeding must be negligible
as well. Therefore the keyed hash function is collision resistant under this
assumption.


2:

Prove that a collision gives a discrete-logarithm thingy.


3: Fields with polynomial basis

3a: Z_2[x]

x is irreducible

If any of the other polynomials are reducible, all factors must contain + 1.

Polynomials ending with + 1:

order 1:
x+1 irreducible

order 2:
(x+1)^2 = x^2 + 2x + 1 -> x^2+1 reducible
x^2+x+1 irreducible

order 3:
(x+1)*(x^2+1) = x^3+x^2+x+1 reducible
(x+1)*(x^2+x+1) = x^3+2x^2+2x+1 = x^3+1 reducible
x^3+x^2+1 irreducible
x^3+x+1 irreducible

As we can see x^3+1 is reducible: x^3 + 1 = (x+1)(x^2+x+1)

For x^5+x^2+x+1 to be reducible, it must have an irreducible factor of order 1
or 2, trial division gives:

x^5+x^2+x+1 = (x+1)(x^4-x^3+x^2+1) = (x+1)(x^4+x^3+x^2+1)
Testing factors: (x+1)(x^4+x^3+x^2+1) = x^5+2x^4+2x^3+x^2+x+1 = x^5+x^2+x+1 OK

For x^7+x^6+1 to be reducible, it must have irreducible factors of order 1, 2
or 3:

Not divisible by x+1, x^2+x+1, x^3+x^2+1 or x^3+x+1, which are all irreducible
polynomials ending with +1.

Therefore x^7+x^6+1 is irreducible.

Answer (3a):
	x and x^7+x^6+1 are irreducible.


3b: Z_2[x]/f(x)

(x^5 + x + 1)(x^3 + x^2 + 1) = x^8 + x^7 + x^5 + x^4 + 2x^3 + x^2 + x + 1 =
	= x^8 + x^7 + x^5 + x^4 + x^2 + 1 in Z_2[x]

x^8 + x^7 + x^5 + x^4 + x^2 + 1 mod x^6 + x + 1:

x^8 + x^7 + x^5 + x^4 + x^2 + 1 =
	(x^2+x)*(x^6+x+1) + x^5 + x^4 - x^3 - x^2 - x + 1

So the remainder: x^5 + x^4 - x^3 - x^2 - x + 1 = 
	x^5 + x^4 + x^3 + x^2 + x + 1 in Z_2[x]


(x+1)^-1*(x+1) = 1 mod (x^6+x+1)
trying to find (x+1)^-1*(x+1) = (x^6+x+1) + 1 = (x^6+x)
candidate for (x+1)^-1 = x^5+x
testing: (x^5+x)*(x+1) = x^6+x
x^6+x mod (x^6+x+1) = -1 = 1 in Z_2[x] (OK)

Answer (3b):
	(x^5 + x + 1)(x^3 + x^2 + 1) = x^5+x^4+x^3+x^2+x+1
	(x+1)^-1 = x^5+x


4: Pseudo-randomness in practice

PRNGs based on cryptographic primitives (stream/block ciphers)

Most stream ciphers work by generating a stream of pseudorandom bits that are
combined (XORed) with the plaintext, and then never reused. An IV is fed as the
seed to the stream cipher and kept secret. To use the pseudorandom generator as
a PRNG, just use the bytes that the cipher outputs. The pseudorandom generator
is only secure if the stream cipher was originally secured. A block cipher can
be turned into a stream cipher by feeding a nonce combined (xor or add etc.)
with the counter (0, 1, 2..) for each block of pseudorandom bits generated with
a key. The nonce and key must of course be kept secret.

[http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29]
[http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
	#Designs_based_on_cryptographic_primitives]

/dev/random in Linux:

Kernel-space randomness was introduced to Linux in the mid 1990's. The design
gathers a pool of entropy from disk usage, keyboard timings, mouse interrupts
etc. Timing between these interrupts add to the estimate of entropy in the
pool. Data from such activity is fed into a cryptographic hash function to
generate data for /dev/random. Programs reading random data from /dev/random
decreases the amount of entropy, or random bits, available to be read from the
pool. If /dev/random runs out of bits the device will block until more
environmental noise is gathered, so applications requiring random bits will
block until sufficient noise is gathered, making its use appropriate for
cryptographic purposes. A non-blocking variant of /dev/random, /dev/urandom
takes a smaller amount of data from /dev/random and generates a larger entropy
pool from this seed, diluting the random bits output.

[http://www.linuxfromscratch.org/hints/downloads/files/entropy.txt]
[http://en.wikipedia.org/wiki//dev/random#Linux]


Yarrow:

Yarrow is a pseudorandom number generator by John Kelsey, Bruce Schneier and
Niels Ferguson. It's in use in both FreeBSD and Mac OS X as their /dev/random
mechanism. It gathers and estimates entropy from unpredictable inputs which it
puts in pools. Periodically the key used is reseeded with new entropy from the
pools. Accumulation is done in two pools, a 'fast' pool and a 'slow' pool, the
fast pool assures that any key compromise will not affect the PRNG for very
long and the slow pool assures that the key gets reseeded eventually, even if
entropy estimates are way off. The reseeding mechanism connects entropy
accumulation to the generating mechanism. If either the pools are unknown or
the current key is known to the attacker, the key will be unknown to the
attacker after the reseed is done. For actual pseudorandom generation, Yarrow
uses a block cipher in counter mode. Yarrow-160 uses 3DES as the block cipher.
The mechanism keeps track of how many blocks are output. When the system's
limit is reached, it generates k bits (keylength k) and use it as a new key.
This prevents backtracking attacks on the cipher. The reseeding mechanism
hashes all inputs to a pool to generate new key bits. In Yarrow-160, this is
done with SHA1.

[http://www.schneier.com/paper-yarrow.html]


Hardware random number generators:

There are also hardware-based random number generators. Some are based on
quantum phenomena with fundamentally random properties, such as nuclear decay
detected by a geiger counter. It can also be based on detecting thermal noise
from a resistor and other atmospheric noise. These hardware-based random number
generators can also offload CPU usage for high-performance cryptographic
applications. As such, there exists hardware SSL accelerators most commonly
used in SSL webservers.

[http://en.wikipedia.org/wiki/HRNG]
[http://en.wikipedia.org/wiki/SSL_acceleration]


5: f1 and f2

For a hash function, flipping one bit should be sufficient to generate a new
random-looking string, so the output of SHA-1 in f2 shouldn't be less random-
looking than SHA-1 in f1. Compare to using counter mode for block ciphers.

For both functions 80 bits from the seed state is leaked. f1 leaks r1, r2
continuously and for f2 the seed counter is implied (first = 1, second = 2..
etc). (An improved version of f2 would have the counter start at H(seed)
instead of 1) 
A birthday attack to try to recover a state seed would have to be
done on the other 80 bits in the seed, for both current cases.

As f2 runs fewer iterations of SHA-1 to produce the same number of bits, I'd
prefer that one.


